@model CCM.Models.PatientProfile_HospitalDetails
<style>
    .lblbold {
        text-align: left;
        font-weight: bold;
        color: green;
        font-size: 16px;
        border: 1px solid;
    }
</style>
@using (Html.BeginForm("_EditHospitalDetails", "PatientProfile", FormMethod.Post, new { @class = "form-horizontal", id = "form_updateHospital", role = "form", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary()
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.PatientId)
    @Html.HiddenFor(m => m.CreatedBy)
    @Html.HiddenFor(m => m.CreatedOn)

    <input type="hidden" id="FullName" name="FullName" class="fullname" value="@Model.FullName" />
    <input type="hidden" id="NPI" name="NPI" value="@Model.NPI"/>
    <input type="hidden" id="Phone" name="Phone" value="@Model.Phone"/>
    <input type="hidden" id="Rate" name="Rate" value="@Model.Rate"/>
    <input type="hidden" id="TotalDays" name="TotalDays" value="@Model.TotalDays"/>
    <input type="hidden" id="City" name="City" value="@Model.City"/>
    <input type="hidden" id="Country" name="Country" value="@Model.Country"/>
    <input type="hidden" id="State" name="State" value="@Model.State"/>

    <div class="form-horizontal">
        <h4>Hospital Hisotry</h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.HospitalName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(item => item.HospitalsId,
       new SelectList(ViewBag.hospitals, "Value", "Text", Model)
       , new { @class = "form-control border-input", @id = "HospitalsId" })
                @Html.ValidationMessageFor(model => model.HospitalsId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2"><label>City :</label><span class="City">@Model.City</span></div>
            <div class="col-md-2">
                <label>Country : </label><span class="Country">@Model.Country</span>
            </div>
            <div class="col-md-2">
                <label>State : </label><span class="State">@Model.State</span>
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label">Search</label>
            @{ var search = Model.FullName == null ? "" : Model.NPI+"-"+Model.FullName +","+Model.Phone; }
            <div class="col-md-4"><input type="text" id="searchnpi" class="form-control border-input" placeholder="Search by NPI,Name or Number" required="required" value="@search" /></div>


            <div class="col-md-2">
                @Html.LabelFor(model => model.FullName, "FullName : ")
                <span class="FullName">
                    @Model.FullName
                    @*@Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control border-input", placeholder = "Required*", required = "required" } })*@
                </span>

                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-2">
                @Html.LabelFor(model => model.NPI, "NPI : ")
                <span class="NPI">@Model.NPI</span>
                @*@Html.EditorFor(model => model.NPI, new { htmlAttributes = new { @class = "form-control border-input", placeholder = "Required*", required = "required" } })*@
                @Html.ValidationMessageFor(model => model.NPI, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-2">
                @Html.LabelFor(model => model.Phone, "Phone : ")
                <span class="Phone">@Model.Phone</span>
                @*@Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control border-input", placeholder = "Required*", required = "required" } })*@
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ICD10Codes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Editor("ICD10Codes", new { htmlAttributes = new { @class = "form-control border-input validaterefillinfo", id = "ICD10Codes", required = "required" } })
                @Html.ValidationMessageFor(model => model.ICD10Codes, "", new { @class = "text-danger", })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Department, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @*@Html.DropDownListFor(item => item.DepartmentId,
                    new SelectList(ViewBag.department, "Value", "Text", Model)
                    , new { @class = "form-control border-input",@id="ddldepartment" })*@
                @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
            </div>


            @Html.LabelFor(model => model.StayType, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @Html.DropDownList("StayType", new List<SelectListItem>
                    { new SelectListItem {Value = "Initial Hospitalization",  Text = "Initial Hospitalization"},
                    new SelectListItem {Value = "Re-Admission",  Text = "Re-Admission"}
                    }, "Type Of Stay", new { @class = "form-control border-input" })
                @Html.ValidationMessageFor(model => model.StayType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.AdmitDate, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @{ var AdmitDate = Model.AdmitDate == null ? "" : Model.AdmitDate.Date.ToString("yyyy-MM-dd"); }
                <input class="form-control border-input text-box single-line AdmitDate" data-val="true" data-val-date="The field Admit Checked Date must be a date." id="AdmitDate" name="AdmitDate" type="date" value="@AdmitDate" onchange="totalamount()">
                @*@Html.EditorFor(model => model.AdmitDate, new { htmlAttributes = new { @class = "form-control", required = "required", onchange = "totalamount()" } })*@
                @Html.ValidationMessageFor(model => model.AdmitDate, "", new { @class = "text-danger" })

            </div>

            @Html.LabelFor(model => model.DischargeDate, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @{ var DischargeDate = Model.DischargeDate == null ? "" : Model.DischargeDate.Date.ToString("yyyy-MM-dd"); }
                <input class="form-control border-input text-box single-line DischargeDate" data-val="true" data-val-date="The field Discharge Checked Date must be a date." id="DischargeDate" name="DischargeDate" type="date" value="@DischargeDate" onchange="totalamount()">
                @*   @Html.EditorFor(model => model.DischargeDate, new { htmlAttributes = new { @class = "form-control", required = "required", onchange = "totalamount()" } })*@
                @Html.ValidationMessageFor(model => model.DischargeDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="margin-top:10px;">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-8" })
                <label class="Rate control-label col-md-3 col-md-offset-1 lblbold">1500</label>
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.TotalDays, htmlAttributes: new { @class = "control-label col-md-6" })
                <label class="control-label TotalDays col-md-4 lblbold" style="text-align:left;font-weight:bold;">0</label>
            </div>
            <div class="col-md-4">
                <label class="control-label col-md-8">Estimated Amount Paid by insurance for stay in hospital :</label>
                <label class="control-label col-md-4 lblbold" id="totalAmount">0$</label>
            </div>
            <div class="col-md-3 text-right">
                <input type="button" value="Update Visit" id="AddBtn" class="btn btn-success logdetails " onclick="SubmitForm('form_updateHospital','Update')" />
                <input type="button" value="Cancel" id="btnCancel" class="btn btn-danger logdetails" />
            </div>
        </div>
    </div>
    <hr />
}
    <script>
        new Def.Autocompleter.Search('ICD10Codes', 'https://clinicaltables.nlm.nih.gov/api/icd10cm/v3/search?sf=code,name',
            { tableFormat: true, valueCols: [0, 1], colHeaders: ['Code', 'Name'] });

        new Def.Autocompleter.Search('searchnpi', 'https://clinicaltables.nlm.nih.gov/api/npi_idv/v3/search?df=NPI,name.full,addr_practice.full,addr_mailing.full,addr_practice.phone,addr_mailing.phone,provider_type'
                    /*{ tableFormat: true, valueCols: [0], colHeaders: ['NPI', 'Name', 'Gender', 'Type', 'Practice Address', 'Mailing Address', 'Phone1', 'Phone2'] }*/);
        Def.Autocompleter.Event.observeListSelections('searchnpi', function () {
            if ($("#searchnpi").val() != "") {
                var drugField = $('#searchnpi')[0];
                var drugFieldVal = drugField.value;
                var searchvalues = drugFieldVal.split(' - ');
                var autocomp = drugField.autocomp;
                $("#NPI").val(searchvalues[0]);
                $("#FullName").val(searchvalues[1]);
                //$("#Speciality").val(searchvalues[6]);
                //$("#Address1").val(searchvalues[2]);
                //$("#Address2").val(searchvalues[3]);
                $("#Phone").val(searchvalues[4]);
                //$("#MobilePhoneNumber").val(searchvalues[5]);
                $(".Phone").text(searchvalues[4]);
                $(".NPI").text(searchvalues[0]);
                $(".FullName").text(searchvalues[1]);
            }
        });
        function hospitaldetails() {
            var hospitalid = $("#HospitalsId").val();
            URL = "/PatientProfile/HospitalDetails?hospitalId=" + hospitalid;
            $.ajax({
                url: URL,
                type: "GET",

                success: function (result) {
                    debugger;
                    $(".loader").hide();
                    var res = result.split("/");
                    $(".City").text(res[0]); $(".Country").text(res[1]); $(".State").text(res[2]);
                    $("#City").val(res[0]); $("#Country").val(res[1]); $("#State").val(res[2]);
                }
            });
        }

        $("#btnCancel").on("click", function () {
            $("#divAddHospital").css("display", "none");
            $("#btnAddHospital").css("display", "block");
        });
        function totalamount() {
            debugger;
            var admitdate = Date.parse($("#AdmitDate").val());
            var dischardate = Date.parse($("#DischargeDate").val());
            var difference = (dischardate - admitdate);
            var diffDays = Math.ceil(difference / (1000 * 3600 * 24));

            $(".TotalDays").text(diffDays);

            var rate = $(".Rate").text();
            var days = $(".TotalDays").text();

            $("#Rate").val(rate); $("#TotalDays").val(diffDays);
            var total = 0;
            if (rate != undefined && days != undefined) {
                total = parseInt(rate) * parseInt(days);
            }
            $("#totalAmount").text(total + ".00 $ ");
        }
    </script>

