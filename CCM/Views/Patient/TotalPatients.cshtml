@model IEnumerable<CCM.Models.Patient>
@using CCM.Models.CCMBILLINGS;
@using CCM.Models;
@using CCM.Helpers;
@{
    List<int> BillingCategoryIdList = new List<int>();
    ApplicationdbContect _db = new ApplicationdbContect();
    List<Tuple<string, string>> liaisonsexist = new List<Tuple<string, string>>();
    List<Tuple<string, string>> translatorexist = new List<Tuple<string, string>>();

    List<EnrollmentSubstatusReason> enrollmentSubstatusReasons = new List<EnrollmentSubstatusReason>();
    List<EnrollmentSubstatusReason> enrollmentSubstatusReasons2 = ViewBag.EnrollmentReasons;
}
@*<link href="//cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css" type="text/css" rel="stylesheet" />
    <link href="https://cdn.datatables.net/buttons/1.4.2/css/buttons.dataTables.min.css" type="text/css" rel="stylesheet" />*@

@*<link href="https://cdn.datatables.net/buttons/1.5.6/css/buttons.dataTables.min.css" type="text/css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.5/css/fixedHeader.dataTables.min.css">*@
@*<link href="https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css" rel="stylesheet" />

    <script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>*@

@*
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css" rel="stylesheet" />*@
<link href="~/Content/PatientDeatil/ProgressBar.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
@*<link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>*@
@*@Html.Partial("_EnrollmentStatusLinks")*@
<script src="~/Scripts/jquery.signalR-2.4.1.js"></script>
<script src="~/signalr/hubs"></script>
<style>
    #profile1 {
        border: 1px solid lightgray;
        padding: 15px;
        box-shadow: 0 2px 10px 3px rgba(8, 8, 8, 0.85);
        float: left;
        width: 100%;
        margin-bottom: 10px;
    }
    .danger-heading {
        color: red;
        margin-top: 10px;
        margin-bottom: 0px;
    }
    .btnuploadpatient {
        margin-left: 10px;
    }

    td.highlight {
        font-weight: bold;
        color: blue;
    }

    /*table.fixedHeader-floating {
        top: 60px !important;
    }*/

    .dataTables_processing {
        background: #efefef !important;
    }

    .dataTables_wrapper .dataTables_processing {
        top: 0 !important;
    }

    #example td {
        white-space: pre;
    }

    .modal-footer {
        margin-top: 0px !important;
        padding-top: 0px !important;
    }
    /*Date Picker**/
    li .form-control {
        margin: 0px !important;
    }

    .form-control {
        border: 2px solid !important;
        border-radius: 3px !important;
        padding: 5px !important;
    }
    /*Date Picker **/
    .search_combo {
        display: none;
    }

    .dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus {
        background-color: #dcdcdc !important;
    }

    .multiselect-container {
        max-height: 300px;
        overflow: auto;
    }

    #tablescroll {
        overflow-x: scroll;
        /*overflow-y:scroll;
        height:50vh;*/
        width: 169vh;
    }

    .btn.btn-primary[disabled] {
        background-color: #3180e380;
    }
</style>

@{
    var allPatients = ViewBag.Status == "Total Patients" ? "currentPage" : "";
    var notAssigned = ViewBag.Status == "Not Assigned" ? "currentPage" : "";

    var notEnrolled = ViewBag.Status == "Not Enrolled" ? "currentPage" : "";
    var inProgress = ViewBag.Status == "In Progress" ? "currentPage" : "";
    var leftMessage = ViewBag.Status == "Left Voice Message" ? "currentPage" : "";
    var invalidNumber = ViewBag.Status == "Invalid Phone Number" ? "currentPage" : "";
    var notSeeingMd = ViewBag.Status == "Patient Not Seeing MD" ? "currentPage" : "";
    var notQualified = ViewBag.Status == "Not Qualified" ? "currentPage" : "";
    var refused = ViewBag.Status == "Refused" ? "currentPage" : "";
    var deceased = ViewBag.Status == "Deceased" ? "currentPage" : "";

    var ccmEnrolled = ViewBag.Status == "Enrolled" ? "currentPage" : "";
    var clinicalSignOff = ViewBag.Status == "Clinical Sign-Off" ? "currentPage" : "";
    var claimSubmission = ViewBag.Status == "Claims Submission" ? "currentPage" : "";

    var status = ViewBag.Status == "Patient Not Seeing MD" ? "Not Seeing MD" : ViewBag.Status == "Enrolled" ? BillingCodeHelper.ccm.ToUpper() : ViewBag.Status;
    if (status == "Unknown")
    {
        status = ViewBag.SubStatus;
    }
}

<body>
    <input type="hidden" id="EnrollmentStatushiden" name="EnrollmentStatushiden" value="" />
    <input type="hidden" id="EnrollmentSubStatushiden" name="EnrollmentSubStatushiden" value="" />
    <input type="hidden" id="EnrollmentSubStatusReasonhiden" name="EnrollmentSubStatusReasonhiden" value="" />


    <input type="hidden" id="EnrollmentStatushidden" name="EnrollmentStatushidden" value="" />
    <input type="hidden" id="EnrollmentSubStatushidden" name="EnrollmentSubStatushidden" value="" />
    <input type="hidden" id="EnrollmentSubStatusReasonhidden" name="EnrollmentSubStatusReasonhidden" value="" />

    <input type="hidden" id="HideDataforCallRecive" value="@ViewBag.HideDataForCallReceive" />
    @if (ViewBag.HideDataForCallReceive == "Yes")
    {
        <label class="dontclosemsg">Don't close this window until you are in the call otherwise you would not be able to open it again.</label>
    }
    <div id="profile1" class="card">
        <h4 class="pageTitle">@ViewBag.Owner - @status Queue</h4>
        @if ((User.IsInRole("Liaison") || User.IsInRole("Admin") || User.IsInRole("Sales")) && string.IsNullOrEmpty(ViewBag.UserId))
        {
            <p class="pageTitle">
                @if (!HelperExtensions.isTranslator(ViewBag.UserIDfortranslator))
                {
                    @Html.ActionLink("Add Patient", "Create", "Patient", null, new { @class = "btn btn-success" })
                    if (!User.IsInRole("Sales"))
                    {
                        @Html.ActionLink("Upload Patient", "UploadNewPatient", "Patient", null, new { @class = "btn btn-success btnuploadpatient" })
                    }
                }
            </p>
        }


        <br />
        <div class="searchbox">
            <div class="seachboxdiv">
                <label>From</label>
                <input type="date" id="DateFrom" class="form-control border-input datefield" />
            </div>
            <div class="seachboxdiv">
                <label>To</label>
                <input type="date" id="DateTo" class="form-control border-input datefield" />
            </div>


            <div class="seachboxdiv">
                <label>Filter Date Column</label>
                <ul class="nav nav-tabs">
                    <li class="dropdown">
                        @Html.DropDownList(
                        "datefiltercolumn",
                        new SelectList(
                        new[]
                        {
                        new {Value = "Assigned on",  Text = "Assigned on"},
                        new {Value = "Appointment",  Text = "Appointment"},
                        new {Value = "Capitated",  Text = "Capitated"},
                        new {Value = "Date of Birth",  Text = "Date of Birth"},
                        new {Value = "Enrolled On",  Text = "Enrolled On"}
                        },
                        "Value", "Text"),
                        "Filtered by", new { @class = "form-control border-input search_combo", id = "datefiltercolumn" })
                    </li>
                </ul>
            </div>

            @if (1 == 1)
            {
                if (User.IsInRole("Admin") || User.IsInRole("PhysiciansGroup") || User.IsInRole("LiaisonGroup") || User.IsInRole("Liaison") || User.IsInRole("Sales"))
                {

                    <div class="seachboxdiv">
                        <label>
                            Status
                        </label>
                        @Html.DropDownList("ddlEnrollmentStatusSearch",

                           new SelectList(ViewBag.EnrollmentStatus, "Text", "Text", Model),
                       "Status", new { @class = "form-control border-input select2 search_combo" })





                    </div>
                    <div class="seachboxdiv">
                        <label>
                            SubStatus
                        </label>

                        @Html.DropDownList("ddlEnrollmentSubStatusSearch",
                          new SelectList(ViewBag.EnrollmentSubStatus, "Text", "Text", Model),

                       "SubStatus" ,  new { @class = "form-control select2 border-input search_combo " })


                    </div>
                    <div class="seachboxdiv">
                        <label>
                            Calling Status
                        </label>

                        @Html.DropDownList(
                       "ddlCallingStatusSearch",
                        new SelectList(
                            new[]
                            {
                                new { Value = "Left Voice Message",  Text = "Left Message" },
                                new { Value = "Left Voice Message 1",   Text = "Left Voice Message 1" },
                                new { Value = "Left Voice Message 2",    Text = "Left Voice Message 2" },
                                new { Value = "Left Voice Message 3", Text = "Left Voice Message 3" }

                            },
                            "Value", "Text", Model),
                        "Calling Status", new { @class = "form-control border-input select2 search_combo", id = "ddlCallingStatusSearch" })


                    </div>
                    <div class="seachboxdiv">
                        <label>
                            Pre-Counselor
                        </label>

                        @Html.DropDownList("Liaisons",
                        ViewBag.Liaisons as SelectList,
                        "Pre-Counselors", new { @class = "form-control border-input select2 search_combo", id = "PreddlLiaisons1" })


                    </div>
                    <div class="seachboxdiv">
                        <label>
                            Post-Counselor
                        </label>

                        @Html.DropDownList("Liaisons",
                        ViewBag.Liaisons as SelectList,
                        "Post-Counselors", new { @class = "form-control border-input select2 search_combo", id = "ddlPostLiaisons1" })


                    </div>
                    if (User.IsInRole("Admin") || User.IsInRole("Sales"))
                    {
                        <div class="seachboxdiv">
                            <label>
                                Pre-Translator
                            </label>

                            @Html.DropDownList("TranslatorFilter",
                            new SelectList(ViewBag.translator, "Value", "Text", Model),
                            "Pre-Translator", new { @class = "form-control border-input select2 search_combo", id = "ddlTranslatorFilter" })
                        </div>
                        <div class="seachboxdiv">
                            <label>
                                Post-Translator
                            </label>

                            @Html.DropDownList("TranslatorFilter",
                            new SelectList(ViewBag.translator, "Value", "Text", Model),
                            "Post-Translator", new { @class = "form-control border-input select2 search_combo", id = "ddlPostTranslatorFilter" })
                        </div>
                        <div class="seachboxdiv">
                            <label>
                                Physician Groups
                            </label>

                            @Html.DropDownList("physiciansGroup",
                            new SelectList(ViewBag.physiciansGroups, "Value", "Text", Model),
                            "Physician Groups", new { @class = "form-control border-input select2 search_combo", id = "ddlPhysiciansGroups1" })
                        </div>

                    }

                }

                <div class="seachboxdiv">
                    <label>
                        Physicians
                    </label>


                    @Html.DropDownList("physician",
                    new SelectList(ViewBag.Physicians, "Value", "Text", Model),
                    "Physicians", new { @class = "form-control border-input select2 search_combo", id = "ddlPhysicians1" })

                </div>

                <div class="seachboxdiv">
                    <div class="form-group">
                        @Html.LabelFor(model => model.FirstOrDefault().PreferredLanguage, "Preferred Language", htmlAttributes: new { @class = "" })
                        @Html.DropDownListFor(
                        item => item.FirstOrDefault().PreferredLanguage,
                        new SelectList(
                            new[]
                            {
                                new { Value = "English",  Text = "English" },
                                new { Value = "French",   Text = "French" },
                                new { Value = "Hindi",    Text = "Hindi" },
                                new { Value = "Japanese", Text = "Japanese" },
                                new { Value = "Korean",   Text = "Korean" },
                                new { Value = "Mandarin", Text = "Mandarin" },
                                new { Value = "Other",    Text = "Other" },
                                new { Value = "Russian",  Text = "Russian" },
                                new { Value = "Spanish",  Text = "Spanish" }
                            },
                            "Value", "Text", Model),
                        "Language", new { @class = "form-control border-input search_combo", id = "ddlLanguages1" })
                        @Html.ValidationMessageFor(model => model.FirstOrDefault().PreferredLanguage, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="seachboxdiv pull-right">

                    <input type="button" value="Clear Filters" class="btn btn-success pull-right" style="margin-top:10px;" id="btnclear" onclick="clearfilters()" />


                </div>

            }



        </div>

    </div>

    <div class="col-md-12 float-left">

    </div>

    <br />
    @if (User.IsInRole("Admin") || User.IsInRole("Sales"))  //enable dropdown
    {
        <div class="row" style="float: left;margin-bottom: 10px;">
            <a href='#' class='btn btn-primary' id="Bulk-Migeration" data-toggle='modal' @*data-target='#InProgressModal1'*@ data-backdrop="static" data-keyboard="false">Assign Counselor/Translator To Current Page Selections</a>
            @*<a href='#' class='btn btn-primary' id="Bulk-Migeration" data-toggle='modal' data-target='#InProgressModal' data-backdrop="static" data-keyboard="false">Assign Counselor/Translator To Current Page Selections</a>*@
            @if (User.IsInRole("Admin"))
            {
                @*<a href='#' class='btn btn-primary' data-toggle='modal' data-target='#EnrollStatusModal' data-backdrop="static" data-keyboard="false">Assign Status To Current Page Selections</a>*@
            }

            <a href='#' class='btn btn-primary' data-toggle='modal' data-target='#LanguageModal' data-backdrop="static" data-keyboard="false">Assign Language To Current Page Selections</a>
            @*<a href='#' class='btn btn-primary' data-toggle='modal' data-target='#EnrollTranslatorModal'>Assign Translator To Current Page Selections</a>*@
        </div>
    }
    @*<div class="container">
    *@
    <br />

    <div class="tablefixwidth1">
        <div id="tablescroll">
            <table id="example" class="table table-striped nowrap " style="width:100%">
                <thead style="overflow-x:scroll">

                    <tr>
                        <th><input type="checkbox" name="select_all" value="1" id="example-select-all"><span>Select All</span></th>
                        <th class="noExport">Details</th>
                        <th>ID</th>
                        <th>Patient Name</th>
                        @*
                            <th>LastName</th>*@
                        <th>Gender</th>
                        <th>Date of Birth</th>
                        <th>Physician</th>
                        @*
                            <th>MD L.Name</th>*@

                        <th>Preferrred Language</th>

                        @*<th>Assigned Date</th>*@
                        @*<th>Counselor Name</th>
                            <th>Translator Name</th>*@
                        <th>Pre-Counselor Name</th>
                        <th>Pre-Translator Name</th>
                        <th>Enrollment Status</th>
                        <th>Enrollment SubStatus</th>
                        @foreach (var item in ViewBag.BillingCategories as List<BillingCategory>)
                        {
                            <th>@item.Name-Counselor</th>
                            <th>@item.Name-Translator</th>
                            @*<th>@item.Name</th>*@
                        }
                        <th>Enrollment Notes</th>
                        <th>Calling Status</th>
                        <th>Enrolled On</th>
                        <th>Appointment Date</th>
                        <th>Insurance Name</th>
                        <th>Insurance ID</th>
                        <th>EMR #</th>
                        <th>Physician Groups</th>
                        @*
                            <th>Picasso Checked</th>
                            <th>Picasso Checked On</th>
                            <th>Medicare Eligibility</th>
                            <th>Medicaid Eligibility</th>
                            <th>Capitated</th>
                            <th>Capitated From</th>
                            <th>Capitated To</th>
                            <th>Cycle</th>




                            <th>EMR Type</th>*@






                        @*<th  class="noExport">Delete</th>*@



                    </tr>
                </thead>


            </table>
        </div>
    </div>
    <!-- In Progress Modal -->
    <div class="modal multi-step" id="InProgressModal1">
        <div class="modal-dialog" id="InProgressModalDialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title step-1" data-step="1">Step 1</h4>
                    <h4 class="modal-title step-2" data-step="2">Step 2</h4>
                    <h4 class="modal-title step-3" id="Model-title-processing" data-step="3">Step 3</h4>
                    <h4 class="modal-title step-4" data-step="4">Final Step</h4>
                </div>
                @using (Ajax.BeginForm("AssignLiaison", "EnrollmentStatus", new { }, new AjaxOptions
                {
                    HttpMethod = "Post",
                    OnSuccess = "Result"
                }))
                {

                    <div class="modal-body step-1" data-step="1">
                        <div class="col-md-12">
                            <label>Change Status?</label>
                            <select id="Modal_changeStatus" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                        </div>
                        <div class="" style="margin-top: 9px;display:none" id="PatientStatus">
                            <div class="col-md-6">
                                <label>Enrollment Status</label>
                                @Html.DropDownList("ddlEnrollmentStatus", (IEnumerable<SelectListItem>
                                 )ViewBag.EnrollmentStatus, null, new { @class = "form-control border-input" })
                            </div>
                            <div class="col-md-6">

                                <label>SubStatus</label>
                                @Html.DropDownList("ddlEnrollmentSubStatus", (IEnumerable<SelectListItem>
                                 )ViewBag.EnrollmentSubStatus, null, new { @class = "form-control border-input" })
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div id="EnrollemntStatusReson">
                                        <label>Reason <span style="color:red">*</span></label>
                                        @Html.DropDownList("ddlEnrollemntStatusReson", (IEnumerable<SelectListItem>)ViewBag.EnrollemntStatusReson, null, new { @class = "form-control border-input" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="row">
                                    <div class="col-md-12" id="EnrollBillingCategory" style="display: grid;">
                                        <label style="width:100%;margin-top:18px">Enrolled In</label>
                                        <div style="display:contents">

                                            @foreach (var item in ViewBag.BillingCategories as List<BillingCategory>)
                                            {
                                                BillingCategoryIdList.Add(item.BillingCategoryId);
                                                <label class="d-block" style="margin-right: 12px;cursor:default; font-size: 13px;width:fit-content;">
                                                    <input type="checkbox" id="@("billingCategoryCheckBox"+item.BillingCategoryId)" value="@item.BillingCategoryId" data-identifier="@item.Name" name="billingCategory" onclick="ShowHideDeEnrollmentDiv(@item.BillingCategoryId)" /> @item.Name
                                                </label>
                                                {
                                                    liaisonsexist.Clear();
                                                    translatorexist.Clear();
                                                    try
                                                    {
                                                        List<Liaison> liaisons = new List<Liaison>();
                                                        liaisons = ViewBag.Laisons;

                                                        foreach (var liaison in liaisons)
                                                        {
                                                            //liaison.Liaisons_BillingCategories = new List<Liaisons_BillingCategories>();

                                                            var exist = liaison.Liaisons_BillingCategories.Where(p => p.BillingCategoryId == item.BillingCategoryId && p.Status == true).Select(p => new
                                                            {
                                                                Id = p.Liaison.Id.ToString(),
                                                                Name = p.Liaison.FirstName + p.Liaison.LastName,

                                                            }).FirstOrDefault();
                                                            // var exist=  liaison.
                                                            if (exist != null)
                                                            {

                                                                liaisonsexist.Add(new Tuple<string, string>(exist.Id, exist.Name));
                                                            }

                                                            //var liaisoncategory = liaisons.Select(p => p.Liaisons_BillingCategories.FirstOrDefault(x => x.BillingCategoryId == item.BillingCategoryId).Liaison).ToList();

                                                        }
                                                        List<Liaison> translators = new List<Liaison>();
                                                        translators = ViewBag.Translators;
                                                        foreach (var translator in translators)
                                                        {


                                                            var exist = translator.Liaisons_BillingCategories.Where(p => p.BillingCategoryId == item.BillingCategoryId && p.Status == true).Select(p => new
                                                            {
                                                                Id = p.Liaison.Id.ToString(),
                                                                Name = p.Liaison.FirstName + p.Liaison.LastName,

                                                            }).FirstOrDefault();
                                                            // var exist=  liaison.
                                                            if (exist != null)
                                                            {

                                                                translatorexist.Add(new Tuple<string, string>(exist.Id, exist.Name));
                                                            }

                                                            //var liaisoncategory = liaisons.Select(p => p.Liaisons_BillingCategories.FirstOrDefault(x => x.BillingCategoryId == item.BillingCategoryId).Liaison).ToList();

                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {

                                                    }
                                                }
                                                <div class=" LiasonTranslatorDiv" id="@("LiasonTranslatorDiv"+item.BillingCategoryId)" data-identifierId="@item.Name" style="margin-bottom: 15px;">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            @Html.Label("Counselor", htmlAttributes: new { @class = "col-md-12", @style = "padding-left: 0px" })
                                                            <div class="col-md-12" style="padding-left: 0px;">
                                                                @Html.DropDownList("Liaison",
                                                 new SelectList(liaisonsexist,"Item1","Item2", Model),
                                                 "Select Counselor", new { @class = "form-control PatientLiaison border-input"/*, required = "required"*/, @id = "Liaison" + item.BillingCategoryId, @data_id = item.Name, @Name = "" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6" style="">
                                                        <div class="form-group">
                                                            @Html.Label("Translator", htmlAttributes: new { @class = "col-md-12", @style = "padding-left: 0px" })
                                                            <div class="col-md-12" style="padding-left: 0px;">
                                                                @Html.DropDownList("Translator",
                                                   new SelectList(translatorexist, "Item1", "Item2", Model),
                                                   "Select Translator", new { @class = "form-control PatientTranslator border-input", @id = "Translator" + item.BillingCategoryId, @data_id = item.Name ,@Name=""})
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div style="margin-top: 10px;" id="DeEnrollmentReasonDiv">
                                    <div class="col-md-12">
                                        <p style="font-weight: bolder; font-size: 14px;">Plase Denroll from Following Categoriets if you want to change Status</p>
                                    </div>
                                    @foreach (var item in ViewBag.BillingCategories as List<BillingCategory>)
                                    {

                                        <div class="row DeEnrollmentReasonRow" id="@("DeEnrollmentReason" + item.BillingCategoryId)">
                                            <div class="col-md-6">
                                                <label>De-Enrollment Reason for @item.Name </label>
                                                @{

                                                    enrollmentSubstatusReasons = enrollmentSubstatusReasons2.Where(p => p.BillingCategoryId == item.BillingCategoryId).ToList();
                                                }
                                                @Html.DropDownList("ddlEnrollemntStatusReson", new SelectList(enrollmentSubstatusReasons, "Name", "Name"), "--Select Reason--", new { @class = "form-control border-input", @id = ("ddlEnrollemntStatusReson" + item.BillingCategoryId), @data_value = item.Name })

                                            </div>
                                        </div>

                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-body step-2" data-step="2">
                        <div class="row" id="PreCounsolerTranslaterDiv">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.Label("Pre-Counselor", htmlAttributes: new { @class = "col-md-12", @style = "padding-left: 0px" })

                                    @Html.DropDownList("LiaisonId",
                         new SelectList(ViewBag.preliaisons, "Value", "Text", Model),
                         /*"Remove Counselor", */new { @class = "form-control border-input ddlLiaisons", required = "required" })

                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.Label("Pre-Translator", htmlAttributes: new { @class = "col-md-12", @style = "padding-left: 0px" })

                                    @Html.DropDownList("TranslatorFilter",
            new SelectList(ViewBag.pretranslator, "Value", "Text", Model),
            /*"Remove Translator",*/ new { @class = "form-control border-input", id = "ddlTranslatorstatus" })

                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12" id="PostEnrollBillingCategoryDiv" style="display: grid;">
                                <label style="width:100%;margin-top:18px">Change Post Counsoler</label>
                                <div style="display:contents">

                                    @foreach (var item in ViewBag.BillingCategories as List<BillingCategory>)
                                    {
                                        BillingCategoryIdList.Add(item.BillingCategoryId);

                                        <div class="PostBillingCategoriesDiv" id="@("PostBillingCategoriesDiv"+item.BillingCategoryId)">
                                            <label class="d-block" style="margin-right: 12px;cursor:default; font-size: 13px;width:fit-content;">
                                                @item.Name
                                            </label>
                                            @{
                                                liaisonsexist.Clear();
                                                translatorexist.Clear();
                                                try
                                                {
                                                    List<Liaison> liaisons = new List<Liaison>();
                                                    liaisons = ViewBag.Laisons;
                                                    var exist = new
                                                    {
                                                        Id = "0",
                                                        Name = "Do Nothing"

                                                    };
                                                    liaisonsexist.Add(new Tuple<string, string>(exist.Id, exist.Name));
                                                    foreach (var liaison in liaisons)
                                                    {
                                                        //liaison.Liaisons_BillingCategories = new List<Liaisons_BillingCategories>();
                                                        exist = liaison.Liaisons_BillingCategories.Where(p => p.BillingCategoryId == item.BillingCategoryId && p.Status == true).Select(p => new
                                                        {
                                                            Id = p.Liaison.Id.ToString(),
                                                            Name = p.Liaison.FirstName + p.Liaison.LastName,

                                                        }).FirstOrDefault();
                                                        // var exist=  liaison.
                                                        if (exist != null)
                                                        {

                                                            liaisonsexist.Add(new Tuple<string, string>(exist.Id, exist.Name));
                                                        }

                                                        //var liaisoncategory = liaisons.Select(p => p.Liaisons_BillingCategories.FirstOrDefault(x => x.BillingCategoryId == item.BillingCategoryId).Liaison).ToList();

                                                    }
                                                    List<Liaison> translators = new List<Liaison>();
                                                    translators = ViewBag.Translators;
                                                    var exist1 = new
                                                    {
                                                        Id = "0",
                                                        Name = "Do Nothing"

                                                    };
                                                    translatorexist.Add(new Tuple<string, string>(exist1.Id, exist1.Name));

                                                    foreach (var translator in translators)
                                                    {


                                                        exist1 = translator.Liaisons_BillingCategories.Where(p => p.BillingCategoryId == item.BillingCategoryId && p.Status == true).Select(p => new
                                                        {
                                                            Id = p.Liaison.Id.ToString(),
                                                            Name = p.Liaison.FirstName + p.Liaison.LastName,

                                                        }).FirstOrDefault();
                                                        // var exist=  liaison.
                                                        if (exist1 != null)
                                                        {

                                                            translatorexist.Add(new Tuple<string, string>(exist1.Id, exist1.Name));
                                                        }

                                                        //var liaisoncategory = liaisons.Select(p => p.Liaisons_BillingCategories.FirstOrDefault(x => x.BillingCategoryId == item.BillingCategoryId).Liaison).ToList();

                                                    }
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                            <div class="PostLiasonTranslatorDiv" id="@("PostLiasonTranslatorDiv"+item.BillingCategoryId)" data-identifierId="@item.Name" style="margin-bottom: 15px;">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        @Html.Label("Counselor", htmlAttributes: new { @class = "col-md-12", @style = "padding-left: 0px" })
                                                        <div class="col-md-12" style="padding-left: 0px;">
                                                            @Html.DropDownList("Liaison",
                                             new SelectList(liaisonsexist,"Item1","Item2", Model),
                                             "Select Counselor", new { @class = "form-control PatientPostLiaison border-input"/*, required = "required"*/, @id = "PostLiaison" + item.BillingCategoryId, @data_id = item.Name, @Name = "" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6" style="">
                                                    <div class="form-group">
                                                        @Html.Label("Translator", htmlAttributes: new { @class = "col-md-12", @style = "padding-left: 0px" })
                                                        <div class="col-md-12" style="padding-left: 0px;">
                                                            @Html.DropDownList("Translator",
                                               new SelectList(translatorexist, "Item1", "Item2", Model),
                                               "Remove Translator", new { @class = "form-control PatientPostTranslator border-input", @id = "PostTranslator" + item.BillingCategoryId, @data_id = item.Name ,@Name=""})
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="modal-body step-3" data-step="3">
                        <div class="col-md-12">
                            <label>Migrate Appointment</label>
                            <select id="ddlIsAppoinment" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                        </div>
                        <div class="row" style="margin-top: 10px;" id="MigerateAppointmentDiv">

                            @foreach (var item in ViewBag.BillingCategories as List<BillingCategory>)
                            {
                                <div class="row MigerateAppointmentInRow" id="@("MigerateAppointmentAppointment"+item.BillingCategoryId)">

                                    <div class="col-md-5" style="padding: 4px 15px;">
                                        <label>
                                            <input type="checkbox" style="width: 15px; height: 13px;" class="MigerateAppointmentIn" value="@item.BillingCategoryId" name="MigerateAppointmentIn" />
                                            <span>@item.Name</span>
                                        </label>
                                    </div>
                                </div>

                            }
                        </div>
                        <div class="container" id="UnableMigerateDiv">

                        <div class="row">
                            <h4 class="danger-heading">You Cannot Migrate Appointments because selected Patients are not Enrolled!</h4>
                        </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary step step-2" data-step="2" onclick="sendEvent('#demo-modal-3', 1)">Back</button>
                        <button type="button" id="step1" class="btn btn-primary step step-1" data-step="1" onclick="sendEvent('#demo-modal-3', 2)">Continue</button>
                        <button type="button" id="step3Back" class="btn btn-primary step step-3" data-step="3" onclick="sendEvent('#demo-modal-3', 2)">Back</button>
                        <button type="button" id="step2Continue" class="btn btn-primary step step-2" data-step="2" onclick="sendEvent('#demo-modal-3', 3)">Continue</button>
                        <button type="button" class="btn btn-success step step-3" onclick="PerformBulkChanges()" id="@*btnAssignliaison*@"><i class="fa fa fa-save" aria-hidden="true"></i>Save</button>
                        <div class="row">
                            <div class="col-md-12" id="progressBarDiv" style="display:none">


                                <div class="row">
                                    <h5 style="text-align:center">Please wait...</h5>
                                    @*<h6 class="progressPercentage" id="@("BulkChangesprogressPercentage"+ViewBag.CurrentUserId)"  style="top: 36px;">0%</h6>*@
                                    <div class="meter" style=" margin-top: 15px;width:500px">
                                        <span class="meterspan" id="@("BulkChangesMeterspan_"+ViewBag.CurrentUserId)" style="width:0%"></span>

                                    </div>
                                </div>




                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>


    @*<div class="modal multi-step" id="InProgressModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title step-1" data-step="1">Step 1</h4>
                        <h4 class="modal-title step-2" data-step="2">Step 2</h4>
                        <h4 class="modal-title step-3" data-step="3">Step 3</h4>
                        <h4 class="modal-title step-4" data-step="4">Final Step</h4>
                    </div>
                    @using (Ajax.BeginForm("AssignLiaison", "EnrollmentStatus", new { }, new AjaxOptions
                    {
                        HttpMethod = "Post",
                        OnSuccess = "Result"
                    }))
                    {
                        <div class="modal-body step-1" data-step="1">
                            <div>
                                <label>Migrate Counselor</label>
                                <select id="ddlIsLiasion" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                            </div>
                            <div class="dropdown" style="margin-top: 9px;display:none" id="liasiondiv">
                                <label>Counselor</label>
                                @Html.DropDownList("LiaisonId",
                             new SelectList(ViewBag.liaisonsAssign, "Value", "Text", Model),
                             "Not Assigned / Unassign", new { @class = "form-control border-input ddlLiaisons", required = "required" })
                            </div>
                        </div>
                        <div class="modal-body step-2" data-step="2">
                            <div>
                                <label>Migrate Translator</label>
                                <select id="ddlIsTranslator" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                            </div>
                            <div class="dropdown" style="margin-top: 9px;display:none" id="translatordiv">
                                <label>Translator</label>
                                @Html.DropDownList("TranslatorFilter",
                             new SelectList(ViewBag.translator, "Value", "Text", Model),
                             "Translator", new { @class = "form-control border-input", id = "ddlTranslatorstatus" })
                            </div>
                        </div>
                        <div class="modal-body step-3" data-step="3">
                            <div>
                                <label>Change Status</label>
                                <select id="ddlIsStatus" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                                <label class="msgnote" style="color:red">Note: The patients with Active Enrolled status will only be changed by Admin User</label>

                            </div>
                            <div id="EnrollmentstatusforLiaison" style="display:none;">
                                <label>Enrollment Status</label>
                                @Html.DropDownList("ddlEnrollmentStatus", (IEnumerable<SelectListItem>
                                 )ViewBag.EnrollmentStatus, null, new { @class = "form-control border-input" })
                                <label>SubStatus</label>
                                @Html.DropDownList("ddlEnrollmentSubStatus", (IEnumerable<SelectListItem>
                                 )ViewBag.EnrollmentSubStatus, null, new { @class = "form-control border-input" })
                                <div id="EnrollemntStatusReson">
                                    <label>Reason <span style="color:red">*</span></label>
                                    @Html.DropDownList("ddlEnrollemntStatusReson", (IEnumerable<SelectListItem>)ViewBag.EnrollemntStatusReson, null, new { @class = "form-control border-input" })
                                </div>
                            </div>
                        </div>
                        <div class="modal-body step-4" data-step="4">
                            <div>
                                <label>Migrate Appointment</label>
                                <select id="ddlIsAppoinment" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary step step-2" data-step="2" onclick="sendEvent('#demo-modal-3', 1)">Back</button>
                            <button type="button" class="btn btn-primary step step-1" data-step="1" onclick="sendEvent('#demo-modal-3', 2)">Continue</button>
                            <button type="button" class="btn btn-primary step step-3" data-step="3" onclick="sendEvent('#demo-modal-3', 2)">Back</button>
                            <button type="button" class="btn btn-primary step step-2" data-step="2" onclick="sendEvent('#demo-modal-3', 3)">Continue</button>
                            <button type="button" class="btn btn-primary step step-4" data-step="4" onclick="sendEvent('#demo-modal-4', 3)">Back</button>
                            <button type="button" class="btn btn-primary step step-3" data-step="3" onclick="sendEvent('#demo-modal-4', 4)">Continue</button>
                            <button type="button" class="btn btn-success step step-4" onclick="assignlasiontopatients()" id="btnAssignliaison"><i class="fa fa fa-save" aria-hidden="true"></i>Save</button>
                        </div>
                    }
                </div>
            </div>
        </div>*@

    @*Old verison Of Liaison Assign*@
    @*<div class="modal fade" id="InProgressModal1" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Assign Liaison to Patient</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" data-backdrop="static" data-keyboard="false">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    @using (Ajax.BeginForm("AssignLiaison", "EnrollmentStatus", new { }, new AjaxOptions
                    {
                        HttpMethod = "Post",
                        OnSuccess = "Result"
                    }))
                    {
                        <div class="modal-body">
                            <ul class="nav nav-tabs">
                                <li>
                                    <label>Migrate Liasion</label>
                                    <select id="ddlIsLiasion" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                                </li>
                                <li class="dropdown" style="margin-right: 9px;">
                                    <label>Liasion</label>
                                    @Html.DropDownList("LiaisonId",
                                    new SelectList(ViewBag.liaisonsAssign, "Value", "Text", Model),
                                    "Not Assigned / Unassign", new { @class = "form-control border-input ddlLiaisons", required = "required" })
                                </li>
                                <li style="margin-right: 9px;">
                                    <label>Change Status</label>
                                    <select id="ddlIsStatus" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                                </li>
                                <li>
                                    <label>Migrate Appointment</label>
                                    <select id="ddlIsAppoinment" class="form-control border-input"><option value="No">No</option><option value="Yes">Yes</option></select>
                                </li>
                            </ul>
                            <div id="EnrollmentstatusforLiaison" style="display:none;">
                                <label>Enrollment Status</label>
                                @Html.DropDownList("ddlEnrollmentStatus", (IEnumerable<SelectListItem>
                                    )ViewBag.EnrollmentStatus, null, new { @class = "form-control border-input" })
                                <label>SubStatus</label>
                                @Html.DropDownList("ddlEnrollmentSubStatus", (IEnumerable<SelectListItem>
                                    )ViewBag.EnrollmentSubStatus, null, new { @class = "form-control border-input" })
                                <div id="EnrollemntStatusReson">
                                    <label>Reason <span style="color:red">*</span></label>
                                    @Html.DropDownList("ddlEnrollemntStatusReson", (IEnumerable<SelectListItem>)ViewBag.EnrollemntStatusReson, null, new { @class = "form-control border-input" })
                                </div>
                            </div>
                        </div>


                        <div class="modal-footer" style="margin-top:0px !important;">
                            <input type="button" value="Save" class="btn btn-warning" onclick="assignlasiontopatients()" />
                            <input type="button" value="Close" class="btn btn-success" data-dismiss="modal" />

                        </div>
                    }
                </div>
            </div>
        </div>*@
    @if (User.IsInRole("Admin") || User.IsInRole("Sales"))  //enable dropdown
    {
        <div class="modal fade" id="EnrollStatusModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Assign Status to Patient</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>



                    <div class="modal-body">



                        <div class="col-md-12 enrollmentStatus">

                            <label>Enrollment Status</label>
                            @Html.DropDownList("EnrollmentStatus", (IEnumerable<SelectListItem>
                                )ViewBag.EnrollmentStatus, null, new { @class = "form-control border-input" })
                            <label>SubStatus</label>
                            @Html.DropDownList("EnrollmentSubStatus", (IEnumerable<SelectListItem>
                                )ViewBag.EnrollmentSubStatus, null, new { @class = "form-control border-input" })
                            <div id="EnrollemntStatusResondiv">
                                <label>Reason <span style="color:red">*</span></label>
                                @Html.DropDownList("EnrollemntStatusReson", (IEnumerable<SelectListItem>)ViewBag.EnrollemntStatusReson, null, new { @class = "form-control border-input" })
                            </div>
                            <div>
                                @*class="col-md-12"*@
                                <label>Notes</label>
                                @Html.TextArea("EnrollmentStatusNotesBulk", new { @class = "form-control border-input", rows = "5" })
                            </div>
                        </div>

                    </div>


                    <div class="modal-footer">
                        <input type="button" value="Save" class="btn btn-warning" onclick="assignstatustopatients()" />
                        <input type="button" value="Close" class="btn btn-success" data-dismiss="modal" />

                    </div>

                </div>
            </div>
        </div>
        <div class="modal fade" id="LanguageModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Assign language to Patient</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">



                        <ul class="nav nav-tabs">
                            <li class="dropdown">
                                @Html.DropDownList(
                                "PreferredLanguage",
                                new SelectList(
                                new[]
                                {
                                new {Value = "English",  Text = "English"},
                                new {Value = "Spanish",  Text = "Spanish"},
                                new {Value = "Russian",  Text = "Russian"},
                                new {Value = "French",   Text = "French"},
                                new {Value = "Japanese", Text = "Japanese"},
                                new {Value = "Korean",   Text = "Korean"},
                                new {Value = "Mandarin", Text = "Mandarin"},
                                new {Value = "Hindi",    Text = "Hindi"},
                                new {Value = "Other",    Text = "Other"}
                                },
                                "Value", "Text"),
                                "Select Preferred Language", new { @class = "form-control border-input", id = "preferredLanguage" })
                            </li>
                        </ul>

                    </div>
                    <div class="modal-footer">
                        <input type="button" value="Save" class="btn btn-warning" onclick="assignlanguagetopatients()" />
                        <input type="button" value="Close" class="btn btn-success" data-dismiss="modal" />

                    </div>

                </div>
            </div>
        </div>
    }
    <div class="modal fade" id="EnrollTranslatorModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Assign Translator to Patient</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @using (Ajax.BeginForm("AssignTranslator", "EnrollmentStatus", new { }, new AjaxOptions
                {
                    HttpMethod = "Post",
                    OnSuccess = "Result"
                }))
                {
                    <div class="modal-body">

                        <ul class="nav nav-tabs">
                            <li class="dropdown">
                                @Html.DropDownList("TranslatorId",
                                new SelectList(ViewBag.translatorAssign, "Value", "Text", Model),
                                "Not Assigned / Unassign", new { @class = "form-control border-input ddlTranslator" })
                            </li>
                        </ul>
                    </div>


                    <div class="modal-footer">
                        <input type="button" value="Save" class="btn btn-warning" onclick="assigntranslatortopatients()" />
                        <input type="button" value="Close" class="btn btn-success" data-dismiss="modal" />
                    </div>
                }
            </div>
        </div>
    </div>



</body>

<script src="~/Scripts/multi-step-modal.js"></script>
<script src="~/Content/multiselect/bootstrap-multiselect.js"></script>

<script type="text/javascript">
    $(function () {
        //Stats Connection with SignalR Hub
        $.connection.hub.start().done(function () {
        })
        //Recives data from server side BulkChangesProgress method
        $.connection.bulkChangingesHub.client.BulkChangesProgress = function (UserId, Percentage) {
            if (Percentage > 100) {
                Percentage = 100;
            }
            $("#BulkChangesMeterspan_" + UserId).animate({ width: Percentage + "%" }, 10);
        }
    })

</script>
<script>
    //$('#ddlIsLiasion').on('change', function (e) {
    //    debugger;
    //    var optionSelected = $("option:selected", this);
    //    var valueSelected = this.value;
    //    if (valueSelected == "Yes")
    //        $("#liasiondiv").css("display", "Block");
    //    else
    //        $("#liasiondiv").css("display", "None");
    //});
    $('#Modal_changeStatus').on('change', function (e) {
        debugger;
        var optionSelected = $("option:selected", this);
        var valueSelected = this.value;
        if (valueSelected == "Yes") {
            $("#PatientStatus").css("display", "Block");
            if (AlreadyEnrolled == true && $("#ddlEnrollmentSubStatus option:selected").text() != "Active Enrolled") {
                $("#DeEnrollmentReasonDiv").show();
            } else {
                $("#DeEnrollmentReasonDiv").hide();
            }
        }
        else {
            $("#PatientStatus").css("display", "None");
            $("#DeEnrollmentReason-Div").hide();
        }
        });
    $('#ddlIsAppoinment').on('change', function (e) {
        var valueSelected = this.value;
        if (valueSelected == "Yes") {
            $("#MigerateAppointmentDiv").show();
        } else {
            $("#MigerateAppointmentDiv").hide();

        }
    })
    $("#ddlEnrollmentStatus").change(function () {

        if ($("#ddlEnrollmentStatus option:selected").text() == "Enrolled") {
            if (AlreadyEnrolled == false && $("#ddlEnrollmentStatus :selected").text() == "Enrolled") {
                $("#EnrollBillingCategory").hide();
            } else {
            $("#EnrollBillingCategory").show();

            }
            if (AlreadyEnrolled == true) {

                $("#DeEnrollmentReasonDiv").hide();
            } else {
                $("#DeEnrollmentReasonDiv").hide();
            }
        } else {
            $("#EnrollBillingCategory").hide();
            $(".BillingCategoryCheckBox").attr("checked", false);
            $(".LiaisonBillingCategoryDiv").hide();
            if (AlreadyEnrolled == true) {
                $("#DeEnrollmentReasonDiv").show();
            } else {
                $("#DeEnrollmentReasonDiv").hide();
            }

        }
    })

    $("#ddlEnrollmentSubStatus").change(function () {

        if ($("#ddlEnrollmentSubStatus option:selected").text() == "Active Enrolled") {
            $("#EnrollBillingCategory").show();
            if (AlreadyEnrolled == true) {

                $("#DeEnrollmentReasonDiv").hide();
            } else {
                $("#DeEnrollmentReasonDiv").hide();
            }

        } else {
            $("#EnrollBillingCategory").hide();
            $(".LiaisonBillingCategoryDiv").hide();

        }
    })



    $('#ddlIsTranslator').on('change', function (e) {
        var optionSelected = $("option:selected", this);
        var valueSelected = this.value;
        if (valueSelected == "Yes")
            $("#translatordiv").css("display", "Block");
        else
            $("#translatordiv").css("display", "None");
    });


    sendEvent = function (sel, step) {
        debugger;
        var sel_event = new CustomEvent('next.m.' + step, { detail: { step: step } });
        window.dispatchEvent(sel_event);

        if (step == 4) {
            var liaStatus = $("#ddlIsLiasion").val();
            var transStatus = $("#ddlIsTranslator").val();
            var changeStatus = $("#ddlIsStatus").val();
            if (liaStatus == "No" && transStatus == "No" && changeStatus == "No")
                $("#btnAssignliaison").hide();
            else
                $("#btnAssignliaison").show();
        }
    }
    //check for patient already enrolled
    $("#ddlEnrollmentSubStatus").change(function () {

        var val = $("#ddlEnrollmentSubStatus :selected").text();
        if (AlreadyEnrolled == true && val == "Active Enrolled") {
            $("#EnrollBillingCategory").hide();
            swal("Warning", "Patient is Already Active Enrolled, Please Select Another Status ", "warning");
            $("#step1").prop("disabled", true);
        }
        else {

            $("#step1").prop("disabled", false);
        }
    })
    $("#ddlEnrollmentStatus").change(function () {
        setTimeout(function () {

            var val = $("#ddlEnrollmentSubStatus :selected").text();
            if (AlreadyEnrolled == true && val == "Active Enrolled") {
                $("#EnrollBillingCategory").hide();
                swal("Warning", "Patient is Already Active Enrolled, Please Select Another Status ", "warning");

                $("#step1").prop("disabled", true);

            }
            else {

                $("#step1").prop("disabled", false);
            }

        }, 200);

    })
    $("#Modal_changeStatus").change(function () {
        var val = $("#ddlEnrollmentSubStatus :selected").text();
        var val1 = $("#ddlEnrollmentSubStatus :selected").text();
        if (val != "Enrolled" && val1 != "Active Enrolled") {
            $("#EnrollBillingCategory").hide();
        }

    })

    $("#Bulk-Migeration").click(function () {
        $("#step1").prop("disabled", false);
    })



    $("#step1").click(function (e) {
        var InvalidReason = false;
        var check;
        var value = $('#Modal_changeStatus option:selected').val();
        if (value == "Yes") {

            if ($("#ddlEnrollmentSubStatus option:selected").text() == "Active Enrolled") {
                var data =@Html.Raw(Json.Encode(BillingCategoryIdList));
                data.forEach((item) => {


                    if ($("#billingCategoryCheckBox" + item).prop("checked") == true) {

                        if (($("#Liaison" + item).val() != '')) {

                        } else {
                            if (($("#Liaison" + item).val() == ''))
                                swal("Warning", "Please Select Counselor For " + ($("#Liaison" + item).data('id')), "warning");
                            check = "NoBillingCategory";
                            sendEvent('#demo-modal-3', 1);
                            return false;
                        }

                    }
                })
            } else {
                check = "otherStatus";
                if (AlreadyEnrolled == true) {
                    $("#PreCounsolerTranslaterDiv").show();
                    $("#ddlIsAppoinment option").filter(function () {
                        return $(this).val() == "Yes";
                    }).hide();
                    $("#ddlIsAppoinment option").filter(function () {
                        return $(this).val() == "No";
                    }).prop("selected", true);
                    $("#PostEnrollBillingCategoryDiv").hide();
                    ByPassPreCounsloler = false;
                    for (var i = 0; i < postConsolerTranslaterList.length; i++) {
                        if ($("#ddlEnrollemntStatusReson" + postConsolerTranslaterList[i]).val() == "") {
                            swal("Warning", "Please Select De-Enrollment Reason for " + $("#ddlEnrollemntStatusReson" + postConsolerTranslaterList[i]).data("value"), "warning");
                            check = "InvalidReason";
                        }
                    }

                } else {
                    $("#PreCounsolerTranslaterDiv").show();
                    $("#PostEnrollBillingCategoryDiv").hide();
                    ByPassPreCounsloler = false
                }
            }
            if (($("#ddlEnrollmentStatus option:selected").text() == "Enrolled" && ($("#ddlEnrollmentSubStatus option:selected").text() == "Active Enrolled" && $('input[name ="billingCategory"]:checked').val() == null))) {
                swal("Warning", "If SubStatus is Active Enrolled, You Must have to select atleast one Category", "warning");
                check = "NoBillingCategory";
            }

            if (check == "NoBillingCategory") {
                sendEvent('#demo-modal-3', 1);
            }
            else if (check == "false") {
                sendEvent('#demo-modal-3', 1);
            }
            else if (check == "InvalidReason") {
                sendEvent('#demo-modal-3', 1);
            } else if (check == "otherStatus") {
                if (AlreadyEnrolled == false || ByPassPreCounsloler == false) {
                    $(".MigerateAppointmentInRow").hide();
                }
                sendEvent('#demo-modal-3', 2);

            } else {
                data.forEach((item) => {
                    if ($("#billingCategoryCheckBox" + item).prop("checked") == true) {
                        $("#MigerateAppointmentAppointment" + item).show();
                    }
                })
                sendEvent('#demo-modal-3', 3);
            }
        } else {
            //$("#ddlIsAppoinment option").filter(function () {
            //    return $(this).val() == "Yes";
            //}).show();
            if (AlreadyEnrolled == true) {
                $("#PreCounsolerTranslaterDiv").hide();
                $("#PostEnrollBillingCategoryDiv").show();
                ByPassPreCounsloler = true;

            } else {
                $("#PreCounsolerTranslaterDiv").show();
                $("#PostEnrollBillingCategoryDiv").hide();
                ByPassPreCounsloler = false
                $(".MigerateAppointmentInRow").hide();
            }
            sendEvent('#demo-modal-3', 2);
        }


    })
    $("#step3Back").click(function (e) {

        var value = $('#Modal_changeStatus option:selected').val();
        if (value == "Yes") {
            if ($("#ddlEnrollmentSubStatus option:selected").text() == "Active Enrolled") {
                sendEvent('#demo-modal-3', 1);
            } else {
                sendEvent('#demo-modal-3', 2);

            }

        } else {
            sendEvent('#demo-modal-3', 2);
        }


    })
    $("#step2Continue").click(function (e) {
        if (ByPassPreCounsloler == false) {
            var value = $('#Modal_changeStatus option:selected').val();
            if ($("#LiaisonId").val() == "") {
                //swal("Warning", "Please Select Pre-Counselor", "warning");
                //sendEvent('#demo-modal-3', 2);
            }
        } else {
            if (postConsolerTranslaterList != null) {
                for (var i = 0; i < postConsolerTranslaterList.length; i++) {
                    if ($("#PostLiaison" + postConsolerTranslaterList[i]).val() == "") {
                        swal("Warning", "Please Select Counsoler for " + $("#PostLiaison" + postConsolerTranslaterList[i]).data("id"), "warning");
                        sendEvent('#demo-modal-3', 2);
                    }


                }
            }
        }
        //if (value == "Yes") {
        //    sendEvent('#demo-modal-3', 1);


        //} else {
        //    sendEvent('#demo-modal-3', 2);
        //}


    })
</script>
<script>
    function clearfilters() {
            $("#ddlLanguages1").val("");
        $("#PreddlLiaisons1").val("");
        $("#ddlPostLiaisons1").val("");
        $("#ddlPostTranslatorFilter").val("");
            $("#ddlPhysicians1").val("");
            $("#ddlPhysiciansGroups1").val("");
            $("#DateFrom").val("");
            $("#DateTo").val("");
        $("#datefiltercolumn").val("");
        $("#ddlTranslatorFilter").val("");
        //
        $("#ddlEnrollmentStatusSearch").val("");
        $("#ddlEnrollmentSubStatusSearch").val("");
        $("#ddlCallingStatusSearch").val("");

        $("#ddlEnrollmentStatusSearch").multiselect('refresh');
        $("#ddlEnrollmentSubStatusSearch").multiselect('refresh');
        $("#ddlCallingStatusSearch").multiselect('refresh');


        $("#ddlPostLiaisons1").multiselect('refresh');
        $("#ddlPostTranslatorFilter").multiselect('refresh');
        $("#ddlLanguages1").multiselect('refresh');
        $("#PreddlLiaisons1").multiselect('refresh');
        $("#ddlPhysicians1").multiselect('refresh');
        $("#ddlPhysiciansGroups1").multiselect('refresh');
        $("#DateFrom").val("");
        $("#DateTo").val("");
        $("#datefiltercolumn").multiselect('refresh');
        $("#ddlTranslatorFilter").multiselect('refresh');
            //$("#ddlLiaisons1").select2("destroy");
            //$("#ddlLiaisons1").select2();
            //$("#ddlPhysicians1").select2("destroy");
            //$("#ddlPhysicians1").select2();
            //$("#ddlPhysiciansGroups1").select2("destroy");
            //$("#ddlPhysiciansGroups1").select2();

            //  $(".select2").select2("val", "");
            //$("#ddlLiaisons1").selectpicker('refresh');
            //$("#ddlPhysicians1").selectpicker('refresh');
            //$("#ddlPhysiciansGroups1").selectpicker('refresh');
            table.ajax.reload();
        }
        function filterGlobal() {
            $('#example').DataTable().search(
                $('#global_filter').val(),
                $('#global_regex').prop('checked'),
                $('#global_smart').prop('checked')
            ).draw();
        }

        function filterColumn(i) {
            $('#example').DataTable().column(i).search(
                $('#col' + i + '_filter').val(),
                $('#col' + i + '_regex').prop('checked'),
                $('#col' + i + '_smart').prop('checked')
            ).draw();
        }
        function assignlanguagetopatients() {
            var Patients = [];
            $(".chkassignpatients").each(function () {
                if ($(this).prop('checked') == true) {
                    Patients.push($(this).val());
                }
            });
            if (Patients.length > 0) {
                $(".loader").show();
                        $.ajax({
                            type: "POST",

                            url: "/EnrollmentStatus/AssignLanguageToAllPatients",
                            data: { 'Language': $("#preferredLanguage").val(), 'Patients': Patients },
                            success: function (result) {

                                $(".loader").hide();
                                if (result == "True") {
                                    location.reload();
                                    $("#LanguageModal").modal("hide");
                                }
                            }, error: function (result) {
                                $(".loader").hide();
                            }
                        });
            } else { swal("Empty", "No Patient's are selected for the Language Assign.!", "info"); }
        }
        //////////////////Asssign Translator to Patients/////////////////
        function assigntranslatortopatients() {
            debugger;
            var Patients = [];
            $(".chkassignpatients").each(function () {
                if ($(this).prop('checked') == true) {
                    Patients.push($(this).val());
                }
            });
            if (Patients.length > 0) {
                $(".loader").show();
                $.ajax({
                    type: "POST",

                    url: "/EnrollmentStatus/AssignTranslatorToAllPatients",
                    data: { 'translatorId': $("#TranslatorId").val(), 'Patients': Patients },
                    success: function (result) {

                        $(".loader").hide();
                        if (result == "True") {
                            location.reload();
                            $("#InProgressModal").modal("hide");
                        }
                    }, error: function (result) {
                        $(".loader").hide();
                    }
                });
            }
            else { swal("Empty", "No Patient's are selected for the Translator Assign.!", "info"); }
        }

    var PerformBulkChanges = function () {

        //$(".loader").show();

        var data =@Html.Raw(Json.Encode(BillingCategoryIdList));
        var Patients = [];
        var EnrolledInList = [];
        var PostList = [];
        $(".chkassignpatients").each(function () {
            if ($(this).prop('checked') == true) {
                Patients.push($(this).val());
            }
        });



        var changeStatus = $('#Modal_changeStatus option:selected').val();


                var data =@Html.Raw(Json.Encode(BillingCategoryIdList));
                data.forEach((item) => {
                    if ($("#billingCategoryCheckBox" + item).prop("checked") == true) {
                        var obj = {
                            BillingcategoryId: item,
                            LiaisonId: $("#Liaison" + item).val(),
                            TranslatorId: $("#Translator" + item).val()
                        }
                        EnrolledInList.push(obj);

                    }
                })
                var EnrolledInListStringify = JSON.stringify(EnrolledInList);
                var EnrollmentStatus = $("#ddlEnrollmentStatus option:selected").text();
                var EnrollmentSubStatus = $("#ddlEnrollmentSubStatus option:selected").text();
        var EnrollemntStatusReson = $("#EnrollemntStatusReson").val();
        var ChangeStatus = $("#Modal_changeStatus option:selected").text();
        var PreLiaisonId = $("#LiaisonId").val();
        var PreTranslaterId = $("#ddlTranslatorstatus").val();
        var MigrateAppointment = $("#ddlIsAppoinment option:selected").text();
        //var MigrateAppointmentIn = $("input[name='MigerateAppointmentIn']:checked").val();
        var MigrateAppointmentIn = [];
        $("input[name='MigerateAppointmentIn']").each(function () {
            if ($(this).prop('checked') == true) {
                MigrateAppointmentIn.push($(this).val());
            }
        })

        //alert(MigrateAppointmentIn.length);
        var AllDeEnrollmentReasons = [];
        if (postConsolerTranslaterList != null) {
            for (var i = 0; i < postConsolerTranslaterList.length; i++) {
                if ($("#ddlEnrollmentSubStatus option:selected").text() != "Active Enrolled") {
                obj = {
                    BillingcategoryId: postConsolerTranslaterList[i],
                    LiaisonId: $("#PostLiaison" + postConsolerTranslaterList[i]).val(),
                    TranslatorId: $("#PostTranslator" + postConsolerTranslaterList[i]).val(),
                }
                PostList.push(obj);
            }
            if ($("#ddlEnrollmentSubStatus option:selected").text() != "Active Enrolled" && AlreadyEnrolled == true) {
                var obj = {
                    BillingcategoryId:postConsolerTranslaterList[i],
                    DeEnrollmentReason: $("#ddlEnrollemntStatusReson" + postConsolerTranslaterList[i]).val()
                }
                AllDeEnrollmentReasons.push(obj);
            }
        }

        }
        var stringifyReasonsList = JSON.stringify(AllDeEnrollmentReasons);
        var stringifyPostList = JSON.stringify(PostList);

        if ($('#ddlIsAppoinment option:selected').text() == "Yes") {
            //if ($("input[name='MigerateAppointmentIn']:checked").val() == null && $("#ddlEnrollmentSubStatus option:selected").text() == "Active Enrolled") {
            if (MigrateAppointmentIn.length == 0 && $("#ddlEnrollmentSubStatus option:selected").text() == "Active Enrolled") {
                swal("Warning", "Please Select a Category to Migrate Appointments", "warning");
                return false;
            }

        } else {
            MigrateAppointmentIn = null;
        } 

        $("#InProgressModal1").css("pointer-events", "none");
        $("#InProgressModal1").css("pointer-events", "none");
        $("#Model-title-processing").css("text-align", "center");
        $("#Model-title-processing").text("Processing...")
        $("#progressBarDiv").css("display", "block");
        $(".modal-body").css("display", "none");
        $(".modal-footer button").css("display", "none");
        $("#InProgressModalDialog").animate({ "margin-top":"225px" }, 300);
                $.ajax({
                    type: "POST",

                    url: "/Patient/PatientBulkChanges",
                    data: { Patients: Patients, ChangeStatus: ChangeStatus, EnrollinList: EnrolledInListStringify, EnrollmentStatus: EnrollmentStatus, EnollmentSubStatus: EnrollmentSubStatus, EnrollemntStatusReson: EnrollemntStatusReson, PreLiaisonId: PreLiaisonId, PreTranslaterId: PreTranslaterId, MigrateAppointment: MigrateAppointment, MigrateAppointmentIn: MigrateAppointmentIn, postConsolerTranslaterList: stringifyPostList, DeEnrollmentReasonsList: stringifyReasonsList},
                    success: function (result) {
                        
                        $(".loader").hide();


                        swal({
                            title: 'Info',
                            text: result,
                            html: true,
                            type: 'Info',
                            icon: "info",
                            closeOnClickOutside: false,
                            buttons: {
                                ViewLogs: {
                                    text: "View Logs",
                                    value: "ViewLogs",
                                },
                                Relaod: {
                                    text: "Close",
                                    value: "Close",
                                }
                            },
                        })
                            .then((value) => {
                                switch (value) {

                                    case "ViewLogs":
                                        window.location.href = "/Patient/Bulkchanges";
                                        break;

                                    case "Close":
                                        location.reload();
                                        break;

                                    default:
                                        location.reload();
                                }
                            });




                        //swal({
                        //    title: 'Info',
                        //    text: result,
                        //    type: 'Info',
                        //    icon: "info",
                        //    showCancelButton: false,
                        //    allowOutsideClick: false,
                        //    confirmButtonColor: '#3085d6',
                        //    cancelButtonColor: '#d33',
                        //    confirmButtonText: 'ok',

                        //    allowOutsideClick: false,
                        //    //showLoaderOnConfirm: false
                        //}).then(function () {
                        //    location.reload();
                        //});

                    }
                });





    }
    function assignlasiontopatients() {
        debugger;
        var liaStatus = $("#ddlIsLiasion").val();
        var transStatus = $("#ddlIsTranslator").val();
        var changeStatus = $("#ddlIsStatus").val();
        var chkappoinment = $("#ddlIsAppoinment").val();
        if (liaStatus == "No" && transStatus == "No" & changeStatus == "No" & chkappoinment == "No") {
        }
        else {
            $(".loader").show();
            try {
                var Patients = [];
                $(".chkassignpatients").each(function () {
                    if ($(this).prop('checked') == true) {
                        Patients.push($(this).val());
                    }
                });
                if (Patients.length > 0) {
                    $(".loader").show();
                    $.ajax({
                        type: "POST",
                        url: "/EnrollmentStatus/AssignLiaisonToAllPatients",
                        data: {
                            'liaisonId': $("#LiaisonId").val(),
                            'translatorId': $("#ddlTranslatorstatus").val(), 'Patients': Patients,
                            'EnrolmentStatus': $("#EnrollmentStatushidden").val(), 'EnrollmentSubStatus': $("#EnrollmentSubStatushidden").val(), 'EnrollmentReason': $("#EnrollmentSubStatusReasonhidden").val(),
                            'istoUpdateStatus': $("#ddlIsStatus").val(), 'istoUpdateAppointments': $("#ddlIsAppoinment").val(),
                            'isliaisonChange': liaStatus,'istranslatorChange':transStatus
                        },
                        success: function (result) {
                            debugger;
                            $(".loader").hide();
                            swal({
                                title: 'Info',
                                text: result,
                                type: 'info',
                                showCancelButton: false,
                                allowOutsideClick: false,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'ok',

                                //allowOutsideClick: false,
                                //showLoaderOnConfirm: false
                            }).then(function () {
                                location.reload();
                            });
                            //if (result == "Successfully updated") {
                            //    location.reload();
                            //    $("#InProgressModal").modal("hide");
                            //}
                            //else {
                            //    swal(result);
                            //    $("#InProgressModal").modal("hide");
                            //}
                        }, error: function (result) {
                            $(".loader").hide();
                        }
                    });

                }
                else {
                    $(".loader").hide();

                    swal("Empty", "No Patient's are selected for the liaison update.!", "info");
                }

            } catch (e) {
                $(".loader").hide();
                swal("error", e, "error");
            }
        }
        }
        function assignstatustopatients() {
            var Patients = [];
            $(".chkassignpatients").each(function () {
                if ($(this).prop('checked') == true) {
                    Patients.push($(this).val());
                }
            });
            if (Patients.length > 0) {
                $(".loader").show();
                $.ajax({
                    type: "POST",

                    url: "/EnrollmentStatus/AssignStatusToAllPatients",
                    data: {
                        'EnrolmentStatus': $("#EnrollmentStatushiden").val(), 'EnrollmentSubStatus': $("#EnrollmentSubStatushiden").val(), 'EnrollmentReason': $("#EnrollmentSubStatusReasonhiden").val(), 'EnrollmentStatusnote': $("#EnrollmentStatusNotesBulk").val(), 'Patients': Patients
                    },
                    success: function (result) {

                        $(".loader").hide();
                        if (result == "True") {
                            location.reload();
                            $("#EnrollStatusModal").modal("hide");
                        }
                    }, error: function (result) {
                        $(".loader").hide();
                    }
                });
            }
            else { swal("Empty", "No Patient's are selected for the Status Assign.!", "info"); }
        }
        var table;

        //$("#ddlLiaisons1").select2();

        //$("#ddlPhysicians1").select2();

        //$("#ddlPhysiciansGroups1").select2();

    $(document).ready(function () {
        $("#EnrollBillingCategory").hide();
        $(".BillingCategoryCheckBox").attr("checked", false);
        $(".LiaisonBillingCategoryDiv").hide();
        $(".LiasonTranslatorDiv").hide();
        $(".MigerateAppointmentInRow").hide();
        $(".PostBillingCategoriesDiv").hide();
        $(".DeEnrollmentReasonRow").hide();
        $("#MigerateAppointmentDiv").hide();
        $("#PostEnrollBillingCategoryDiv").hide();



        //Combo Search
        $('#datefiltercolumn, #PreddlLiaisons1,#ddlPostTranslatorFilter, #ddlPostLiaisons1, #ddlTranslatorFilter, #ddlPhysiciansGroups1, #ddlPhysicians1, #ddlLanguages1, #ddlEnrollmentStatusSearch, #ddlEnrollmentSubStatusSearch, #ddlCallingStatusSearch').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true
        });

        $('#InProgressModal').on('shown.bs.modal', function (e) {

            sendEvent('#demo-modal-3', 1);
        })

            if ($("#HideDataforCallRecive").val() == "Yes") {
                $(".navbar-fixed-top").css({ "display": "none" });
                $("#sidebar").css("display", "none");
                $("html, body").css("margin-left", "0");



            }
            $(".datefield,#datefiltercolumn").change(function () {
                table.ajax.reload();
            });
        $("#PreddlLiaisons1, #ddlTranslatorFilter,#ddlPostLiaisons1, #ddlPostTranslatorFilter, #ddlEnrollmentStatusSearch, #ddlEnrollmentSubStatusSearch, #ddlCallingStatusSearch").change(function () {

                table.ajax.reload();
            });
            $("#ddlPhysicians1").change(function () {

                table.ajax.reload();
            });
            $("#ddlPhysiciansGroups1").change(function () {

                table.ajax.reload();
            });
            $("#ddlLanguages1").change(function () {

                table.ajax.reload();
            });
            //function filterGlobal() {
            //    $('#example').DataTable().search(
            //        $('#global_filter').val(),
            //        $('#global_regex').prop('checked'),
            //        $('#global_smart').prop('checked')
            //    ).draw();
            //}

            var UserRolestr = '@ViewBag.Owner';
            var status = "@ViewBag.StatusStr";
            var User = "@ViewBag.UserId";
            var UserRolestr = "@ViewBag.UserRole";
            var DateStr = "@ViewBag.DateStr";
            var statusstr = "@ViewBag.SubStatus";
            if (UserRolestr == "Liaison") {
                $("#ddlLiaisons1").val('@ViewBag.CCMID');
                $("#ddlLiaisons1").multiselect('refresh')
            }
            else {
                if (UserRolestr == "PhysiciansGroup") {
                    $("#ddlPhysiciansGroups1").val('@ViewBag.CCMID');
                    $("#ddlPhysiciansGroups1").multiselect('refresh')
                }
                else {
                    if (UserRolestr == "Physician") {
                        $("#ddlPhysicians1").val('@ViewBag.CCMID');
                        $("#ddlPhysicians1").multiselect('refresh')
                    }

                }
        }
        debugger;
        $("#ddlEnrollmentStatusSearch").val(status);
        $("#ddlEnrollmentStatusSearch").multiselect('refresh');
        $("#ddlEnrollmentSubStatusSearch").val(statusstr);
        $("#ddlEnrollmentSubStatusSearch").multiselect('refresh');


            var urltobesend = "/Patient/LoadDrugData?status=" + status + "&userId=" + User + "&date1=" + DateStr + "&substatus=" + statusstr;

            if (DateStr == "") {
                urltobesend = "/Patient/LoadDrugData?status=" + status + "&userId=" + User + "&substatus=" + statusstr;
            }
            var hidedataforreceivecall = $("#HideDataforCallRecive").val();
        $.fn.dataTable.ext.errMode = 'throw';

            table = $("#example").on('page.dt', function () {
                $('#example-select-all').prop("checked", false);

            }).DataTable({
                //"scrollY": 200,
                //"scrollX": false,
                fixedHeader: {
                    header: false,
                    footer: false
                },

                "processing": true, // for show progress bar
                  "language": {
            processing: '<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.0" width="256px" height="32px" viewBox="0 0 128 16" xml:space="preserve"><path fill="#96a6d8" fill-opacity="0.42" d="M6.4,4.8A3.2,3.2,0,1,1,3.2,8,3.2,3.2,0,0,1,6.4,4.8Zm12.8,0A3.2,3.2,0,1,1,16,8,3.2,3.2,0,0,1,19.2,4.8ZM32,4.8A3.2,3.2,0,1,1,28.8,8,3.2,3.2,0,0,1,32,4.8Zm12.8,0A3.2,3.2,0,1,1,41.6,8,3.2,3.2,0,0,1,44.8,4.8Zm12.8,0A3.2,3.2,0,1,1,54.4,8,3.2,3.2,0,0,1,57.6,4.8Zm12.8,0A3.2,3.2,0,1,1,67.2,8,3.2,3.2,0,0,1,70.4,4.8Zm12.8,0A3.2,3.2,0,1,1,80,8,3.2,3.2,0,0,1,83.2,4.8ZM96,4.8A3.2,3.2,0,1,1,92.8,8,3.2,3.2,0,0,1,96,4.8Zm12.8,0A3.2,3.2,0,1,1,105.6,8,3.2,3.2,0,0,1,108.8,4.8Zm12.8,0A3.2,3.2,0,1,1,118.4,8,3.2,3.2,0,0,1,121.6,4.8Z"/><g transform="translate(36 0)"><path fill="#052aa3" fill-opacity="1" d="M-42.7,3.84A4.16,4.16,0,0,1-38.54,8a4.16,4.16,0,0,1-4.16,4.16A4.16,4.16,0,0,1-46.86,8,4.16,4.16,0,0,1-42.7,3.84Zm12.8-.64A4.8,4.8,0,0,1-25.1,8a4.8,4.8,0,0,1-4.8,4.8A4.8,4.8,0,0,1-34.7,8,4.8,4.8,0,0,1-29.9,3.2Zm12.8-.64A5.44,5.44,0,0,1-11.66,8a5.44,5.44,0,0,1-5.44,5.44A5.44,5.44,0,0,1-22.54,8,5.44,5.44,0,0,1-17.1,2.56Z"/><animateTransform attributeName="transform" type="translate" values="23 0;36 0;49 0;62 0;74.5 0;87.5 0;100 0;113 0;125.5 0;138.5 0;151.5 0;164.5 0;178 0" calcMode="discrete" dur="1560ms" repeatCount="indefinite"/></g></svg> '},

                "serverSide": true, // for process server side
                "filter": true, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "stateSave": false,
                "pageLength": 10,

                bDeferRender: true,
                colReorder: true,
                "ajax": {
                    "url": "/Patient/LoadDrugData",
                    "type": "POST",
                    "datatype": "json",
                    "data": function (d) {
                        d.substatus = $("#ddlEnrollmentSubStatusSearch").val(),
                            d.date1 = DateStr,
                            d.status = $("#ddlEnrollmentStatusSearch").val(),
                            d.userId = User,
                            //d.LiaisonId = $("#ddlLiaisons1").val(),
                            d.PhysicianID = $("#ddlPhysicians1").val(),
                            //d.TranslatorID = $("#ddlTranslatorFilter").val()
                            d.PhysicianGroupID = $("#ddlPhysiciansGroups1").val(),
                            d.DateFrom = $("#DateFrom").val(),
                            d.DateTo = $("#DateTo").val(),
                            d.SearchCol = $("#datefiltercolumn").val(),
                            d.Languages = $("#ddlLanguages1").val(),
                            d.CallingStatus = $("#ddlCallingStatusSearch").val(),
                            d.PostLiaisonId = $("#ddlPostLiaisons1").val(),
                            d.PostTranslatorID = $("#ddlPostTranslatorFilter").val(),
                        d.PreLiaisonId = $("#PreddlLiaisons1").val(),
                            d.PreTranslaterId = $("#ddlTranslatorFilter").val()


                    },

                },
                'columnDefs': [{
                    'targets': 0,
                    'searchable': false,
                    'orderable': false,
                    'className': 'dt-body-center',
                    'render': function (data, type, full, meta) {
                        return '<input type="checkbox" name="id[]" value="'
                            + full.Id + '" class="chkassignpatients checkboxes" >';
                    }
                }],
                'order': [2, 'desc'],
                //"dom": 'Blfrtip',
                "dom": '<"top"i>rt<"bottom"Blfrtip><"clear">',
                lengthMenu: [
                    [10, 25, 50/*, -1*/,100],
                    ['10 rows', '25 rows', '50 rows'/*, 'Show all'*/, '100 rows']
                ],
                buttons: [{
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: ["thead th:not(.noExport)", ':visible']
                    }
                },
                    , {
                    extend: 'pdfHtml5',
                    orientation: 'landscape',
                    pageSize: 'LEGAL',
                    exportOptions: {
                        columns: ["thead th:not(.noExport)", ':visible']
                    }
                }, 'colvis'],
                "columns": [

                    { "data": null, defaultContent: '' },
                    {
                        "render": function (data, type, full, meta) {

                            ///Patient/Details?id=' + callerpatientid +'&HideDataforCallRecive=Yes
                            return '<a class="btn btn-success btn-sm" href=/Patient/Details?id=' + full.Id + '&HideDataforCallReceive=' + hidedataforreceivecall + '><i class="fa fa-eye" aria-hidden="true"></i>Details</a>';
                            //return '<a class="btn btn-success btn-sm" href=@Url.Action("Details","Patient")/' + full.Id + '>Details</a>';
                        }

                    },
                    { "data": "Id", "name": "Id", "autoWidth": true },
                    { "data": "FirstName", "name": "FirstName", "autoWidth": true },
                    //{ "data": "LastName", "name": "LastName", "autoWidth": true },
                    { "data": "Gender", "name": "Gender", "autoWidth": true },
                    { "data": "BirthDatestr", "name": "BirthDatestr", "autoWidth": true },
                    //{
                    //    "data": "BirthDate", "name": "BirthDate", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));
                    //       return ('0' + (dt.getMonth()+1)).slice(-2) + '/'
                    //            + ('0' + (dt.getDate())).slice(-2) + '/'
                    //            + dt.getFullYear();
                    //        //return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},
                    { "data": "DocFirstName", "name": "DocFirstName", "autoWidth": true },
                    //{ "data": "DocLastName", "name": "DocLastName", "autoWidth": true },
                    { "data": "PreferredLanguage", "name": "PreferredLanguage", "autoWidth": true },
                    //{ "data": "liaisonassignedon", "name": "liaisonassignedon", "autoWidth": true },
                    //{
                    //    "data": "liaisonassignedon", "name": "liaisonassignedon", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));
                    //        var h = dt.getHours(), m = dt.getMinutes();
                    //        var _time = (h > 12) ? (('0' + (h - 12)).slice(-2) + ':' + ('0' + (m)).slice(-2) + ' PM') : (('0' + (h)).slice(-2) + ':' + ('0' + (m)).slice(-2) + ' AM');
                    //        return ('0' + (dt.getMonth() + 1)).slice(-2) + '/'
                    //            + ('0' + (dt.getDate())).slice(-2) + '/'
                    //            + dt.getFullYear() + ' ' + _time;
                    //        //return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},
                    //{
                    //    "data": "liaisonFirstName", "name": "liaisonFirstName", "autoWidth": true,
                    //    "render": function (data, type, full, meta) {
                    //        return full.liaisonFirstName + " " + full.liaisonLastName;
                    //    }
                    //},//index 9
                    //{ "data": "Translator", "name": "Translator", "autoWidth": true },
                    { "data": "PreLiaisonName", "name": "PreLiaisonName", "autoWidth": true },
                    { "data": "PreTranslatorName", "name": "PreTranslatorName", "autoWidth": true },
                    { "data": "EnrollmentStatus", "name": "EnrollmentStatus", "autoWidth": true },
                    { "data": "enrollmentsubstatus", "name": "enrollmentsubstatus", "autoWidth": true },
                    {
                        "render": function (data, type, full, meta) {
                            if (full.TotalPatientsCategoryViewModel[0] != null) {
                                return full.TotalPatientsCategoryViewModel[0].LiaisonName;
                            } else {
                                return "";
                            }

                        }
                    },
                    {
                        "render": function (data, type, full, meta) {
                            if (full.TotalPatientsCategoryViewModel[0] != null) {
                                return full.TotalPatientsCategoryViewModel[0].TranslatorName;
                            } else {
                                return "";
                            }

                        }
                    },
                    //{
                    //    "render": function (data, type, full, meta) {
                    //        if (full.TotalPatientsCategoryViewModel[0] != null) {
                    //            return full.TotalPatientsCategoryViewModel[0].CategoryName;
                    //        } else {
                    //            return "";
                    //        }

                    //    }
                    //},

                    {
                        "render": function (data, type, full, meta) {
                            if (full.TotalPatientsCategoryViewModel[1] != null) {
                                return full.TotalPatientsCategoryViewModel[1].LiaisonName;
                            } else {
                                return "";
                            }

                        }
                    },
                    {
                        "render": function (data, type, full, meta) {
                            if (full.TotalPatientsCategoryViewModel[1] != null) {
                                return full.TotalPatientsCategoryViewModel[1].TranslatorName;
                            } else {
                                return "";
                            }

                        }
                    },
                    {
                        "render": function (data, type, full, meta) {
                            if (full.TotalPatientsCategoryViewModel[2] != null) {
                                return full.TotalPatientsCategoryViewModel[2].LiaisonName;
                            } else {
                                return "";
                            }

                        }
                    },
                    {
                        "render": function (data, type, full, meta) {
                            if (full.TotalPatientsCategoryViewModel[2] != null) {
                                return full.TotalPatientsCategoryViewModel[2].TranslatorName;
                            } else {
                                return "";
                            }

                        }
                    },
                    //{
                    //    "render": function (data, type, full, meta) {
                    //        if (full.TotalPatientsCategoryViewModel[1] != null) {
                    //            return full.TotalPatientsCategoryViewModel[1].CategoryName;
                    //        } else {
                    //            return "";
                    //        }

                    //    }
                    //},

                    { "data": "note", "name": "note", "autoWidth": true },

                    { "data": "callingstatus", "name": "callingstatus", "autoWidth": true },
                    { "data": "enrolledonstr", "name": "enrolledonstr", "autoWidth": true },
                    //{
                    //    "data": "enrolledon", "name": "enrolledon", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));
                    //        var h = dt.getHours(), m = dt.getMinutes();
                    //        var _time = (h > 12) ? (('0' + (h - 12)).slice(-2) + ':' + ('0' + (m)).slice(-2) + ' PM') : (('0' + (h)).slice(-2) + ':' + ('0' + (m)).slice(-2) + ' AM');
                    //        return ('0' + (dt.getMonth() + 1)).slice(-2) + '/'
                    //            + ('0' + (dt.getDate())).slice(-2) + '/'
                    //            + dt.getFullYear() + ' ' + _time;
                    //        //return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},
                    { "data": "AppointmentDateStr", "name": "AppointmentDateStr", "autoWidth": true },
                    { "data": "insuranceid", "name": "insuranceid", "autoWidth": true },
                    { "data": "insurancename", "name": "insurancename", "autoWidth": true },
                    //{
                    //    "data": "AppointmentDate", "name": "AppointmentDate", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));
                    //        var h = dt.getHours(), m = dt.getMinutes();
                    //        var _time = (h > 12) ? (('0' + (h - 12)).slice(-2) + ':' + ('0' + (m)).slice(-2) + ' PM') : (('0' + (h)).slice(-2) + ':' + ('0' + (m)).slice(-2) + ' AM');
                    //        return ('0' + (dt.getMonth() + 1)).slice(-2) + '/'
                    //            + ('0' + (dt.getDate())).slice(-2) + '/'
                    //            + dt.getFullYear() + ' ' + _time;
                    //        //return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},
                    { "data": "emrnumber", "name": "emrnumber", "autoWidth": true },
                    { "data": "PhyGroupName", "name": "PhyGroupName", "autoWidth": true },
                    //{ "data": "picassochecked", "name": "picassochecked", "autoWidth": true },
                    //{
                    //    "data": "picssodate", "name": "picssodate", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));

                    //        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},
                    //{ "data": "medicareeligibility", "name": "medicareeligibility", "autoWidth": true },
                    //{ "data": "medicaideligibility", "name": "medicaideligibility", "autoWidth": true },
                    //{ "data": "capitated", "name": "capitated", "autoWidth": true },
                    //{
                    //    "data": "capitatedfrom", "name": "capitatedfrom", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));

                    //        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},
                    //{
                    //    "data": "capitatedto", "name": "capitatedto", "autoWidth": true,
                    //    "render": function (data) {
                    //        if (data === null) return "";

                    //        var pattern = /Date\(([^)]+)\)/;
                    //        var results = pattern.exec(data);
                    //        var dt = new Date(parseFloat(results[1]));

                    //        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    //    }

                    //},



                    //{
                    //    "data": "FirstName", "name": "FirstName", "autoWidth": true,
                    //    "render": function (data, type, full, meta) {
                    //        return full.FirstName + " " + full.LastName;
                    //    }
                    //},
                    //{ "data": "Cycle", "name": "Cycle", "autoWidth": true },





                    //{ "data": "emrtype", "name": "emrtype", "autoWidth": true },

                    @*{
                        "render": function (data, type, full, meta) {
                            return '<a class="btn btn-danger btn-sm" href=@Url.Action("Delete","Patient")/' + full.Id + '>Delete</a>';
                        }
                    },*@


                    //{  "name": "Test1", "autoWidth": true },
                    //{  "name": "Test2", "autoWidth": true },
                    //{  "name": "Test3", "autoWidth": true },

                        //{
                        //    "render": function (data, type, full, meta) {


                        //    return null;
                        //}
                    //},

                    //{ "data": "TotalPatientsCategoryViewModel[0].TranslatorName", "name": "TotalPatientsCategoryViewModel[0].TranslatorName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[0].CategoryName", "autoWidth": true },

                    //{ "data": "TotalPatientsCategoryViewModel[1].LiaisonName", "name": "TotalPatientsCategoryViewModel[1].LiaisonName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[1].TranslatorName", "name": "TotalPatientsCategoryViewModel[1].TranslatorName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[1].CategoryName", "name": "TotalPatientsCategoryViewModel[1].CategoryName", "autoWidth": true },

                    //{ "data": "TotalPatientsCategoryViewModel[2].LiaisonName", "name": "TotalPatientsCategoryViewModel[2].LiaisonName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[2].TranslatorName", "name": "TotalPatientsCategoryViewModel[2].TranslatorName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[2].CategoryName", "name": "TotalPatientsCategoryViewModel[2].CategoryName", "autoWidth": true },


                    //{ "data": "TotalPatientsCategoryViewModel[3].LiaisonName", "name": "TotalPatientsCategoryViewModel[3].LiaisonName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[3].TranslatorName", "name": "TotalPatientsCategoryViewModel[3].TranslatorName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[3].CategoryName", "name": "TotalPatientsCategoryViewModel[3].CategoryName", "autoWidth": true },

                    //{ "data": "TotalPatientsCategoryViewModel[4].LiaisonName", "name": "TotalPatientsCategoryViewModel[4].LiaisonName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[4].TranslatorName", "name": "TotalPatientsCategoryViewModel[4].TranslatorName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[4].CategoryName", "name": "TotalPatientsCategoryViewModel[4].CategoryName", "autoWidth": true },

                    //{ "data": "TotalPatientsCategoryViewModel[4].LiaisonName", "name": "TotalPatientsCategoryViewModel[5].LiaisonName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[4].TranslatorName", "name": "TotalPatientsCategoryViewModel[5].TranslatorName", "autoWidth": true },
                    //{ "data": "TotalPatientsCategoryViewModel[4].CategoryName", "name": "TotalPatientsCategoryViewModel[5].CategoryName", "autoWidth": true },

                ]

            });


        //table.columns(22).visible(false);



            $('input.global_filter').on('keyup click', function () {
                filterGlobal();
            });

            $('input.column_filter').on('keyup click', function () {
                filterColumn($(this).parents('tr').attr('data-column'));
            });
            // Handle click on "Select all" control
            $('#example-select-all').on('click', function () {
                // Check/uncheck all checkboxes in the table
                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input[type="checkbox"]', rows).prop('checked', this.checked);
            });

            // Handle click on checkbox to set state of "Select all" control
            $('#example tbody').on('change', 'input[type="checkbox"]', function () {
                // If checkbox is not checked
                if (!this.checked) {
                    var el = $('#example-select-all').get(0);
                    // If "Select all" control is checked and has 'indeterminate' property
                    if (el && el.checked && ('indeterminate' in el)) {
                        // Set visual state of "Select all" control
                        // as 'indeterminate'
                        el.indeterminate = true;
                    }
                }
            });
            if (UserRolestr != "Admin") {
                table.columns(9).visible(false);
            }
            else {
                table.columns(9).visible(true);
            }
            //if (UserRolestr == "Sales")
            //    table.columns(21).visible(false);
            //else
            //    table.columns(21).visible(true);

            //Statuses
            if (UserRolestr == "Admin" || UserRolestr=="Sales") {
                $("#EnrollmentSubStatus").children('option').hide();

                $("#EnrollmentStatus option").filter(function () {
                    return $(this).text() == $("#EnrollmentStatushiden").val();
                }).prop("selected", true);

                $("#EnrollmentSubStatus").children("option[value='" + $('#EnrollmentStatus').get(0).value + "']").show();
                $("#EnrollmentSubStatus option").filter(function () {
                    return $(this).text() == $("#EnrollmentSubStatushiden").val();
                }).prop("selected", true);

                $("#EnrollemntStatusReson option:contains(" + $("#EnrollmentSubStatusReasonhiden").val() + ")").attr('selected', 'selected');
                $("#EnrollemntStatusResondiv").hide();
                if ($("#EnrollmentSubStatus option:selected").text() == "In-Active Enrolled") {
                    $("#EnrollemntStatusResondiv").show();
                }
                $("#EnrollmentStatushiden").val($("#EnrollmentStatus option:selected").text());
                $("#EnrollmentSubStatushiden").val($("#EnrollmentSubStatus option:selected").text());
                $("#EnrollmentSubStatusReasonhiden").val($("#EnrollemntStatusReson option:selected").text());
                $(document).on('change', '#EnrollmentStatus', function () {

                    $("#EnrollmentSubStatus").children('option').hide();
                    $("#EnrollmentSubStatus").children("option[value='" + $(this).val() + "']").show();
                    $("#EnrollmentSubStatus").val($("#EnrollmentStatus").val());

                    $("#EnrollmentStatushiden").val($("#EnrollmentStatus option:selected").text());
                    $("#EnrollmentSubStatushiden").val($("#EnrollmentSubStatus option:selected").text());
                    $("#EnrollemntStatusResondiv").hide();
                });
                $(document).on('change', '#EnrollmentSubStatus', function () {

                    $("#EnrollmentSubStatushiden").val($("#EnrollmentSubStatus option:selected").text());

                    if ($("#EnrollmentSubStatus option:selected").text() == "In-Active Enrolled") {

                        $("#EnrollemntStatusResondiv").show();

                    }
                    else {
                        $("#EnrollemntStatusResondiv").hide();
                    }
                });
                $(document).on('change', '#EnrollemntStatusReson', function () {
                    $("#EnrollmentSubStatusReasonhiden").val($("#EnrollemntStatusReson option:selected").text());
                });
                  ////////////////////////  ////////////////////////  ////////////////////////  ////////////////////////
                //////////////////////////Enrollment Status change For Liaison/////////////////////////////////////////
                ////////////////////////  ////////////////////////  ////////////////////////  ////////////////////////
                $("#ddlEnrollmentSubStatus").children('option').hide();

                $("#ddlEnrollmentStatus option").filter(function () {
                    return $(this).text() == $("#EnrollmentStatushidden").val();
                }).prop("selected", true);

                $("#ddlEnrollmentSubStatus").children("option[value='" + $('#ddlEnrollmentStatus').get(0).value + "']").show();
                $("#ddlEnrollmentSubStatus option").filter(function () {
                    return $(this).text() == $("#EnrollmentSubStatushidden").val();
                }).prop("selected", true);

                $("#ddlEnrollemntStatusReson option:contains(" + $("#EnrollmentSubStatusReasonhidden").val() + ")").attr('selected', 'selected');
                $("#EnrollemntStatusReson").hide();
                if ($("#ddlEnrollmentSubStatus option:selected").text() == "In-Active Enrolled") {
                    $("#EnrollemntStatusReson").show();
                }
                $("#EnrollmentStatushidden").val($("#ddlEnrollmentStatus option:selected").text());
                $("#EnrollmentSubStatushidden").val($("#ddlEnrollmentSubStatus option:selected").text());
                $("#EnrollmentSubStatusReasonhidden").val($("#ddlEnrollemntStatusReson option:selected").text());
                $(document).on('change', '#ddlEnrollmentStatus', function () {

                    $("#ddlEnrollmentSubStatus").children('option').hide();

                    if (AlreadyEnrolled == false && $("#ddlEnrollmentStatus :selected").text() == "Enrolled") {
                        debugger;
                        $("#ddlEnrollmentSubStatus").children("option[value='" + $(this).val() + "']").show();
                        $("#ddlEnrollmentSubStatus option").filter(function () {
                            return $(this).text() == "Active Enrolled";
                        }).hide();
               
                        $("#ddlEnrollmentSubStatus option").filter(function () {
                            return ($(this).text() == "In-Active Enrolled");
                        }).prop("selected", true);
                        $("#EnrollemntStatusReson").show();
                    } else {
                    $("#ddlEnrollmentSubStatus").children("option[value='" + $(this).val() + "']").show();
                        $("#ddlEnrollmentSubStatus").val($("#ddlEnrollmentStatus").val());
                        $("#EnrollemntStatusReson").hide();
                    }


                    $("#EnrollmentStatushidden").val($("#ddlEnrollmentStatus option:selected").text());
                    $("#EnrollmentSubStatushidden").val($("#ddlEnrollmentSubStatus option:selected").text());
               
                });
                $(document).on('change', '#ddlEnrollmentSubStatus', function () {

                    $("#EnrollmentSubStatushidden").val($("#ddlEnrollmentSubStatus option:selected").text());

                    if ($("#ddlEnrollmentSubStatus option:selected").text() == "In-Active Enrolled") {


                        if (AlreadyEnrolled == true) {
                            $("#EnrollemntStatusReson").hide();
                            $("#DeEnrollmentReasonDiv").show();
                        } else {
                            $("#EnrollemntStatusReson").show();
                            $("#DeEnrollmentReasonDiv").hide();
                        }
                    }
                    else {
                        $("#EnrollemntStatusReson").hide();
                    }
                });
                $(document).on('change', '#ddlEnrollemntStatusReson', function () {
                    $("#EnrollmentSubStatusReasonhidden").val($("#ddlEnrollemntStatusReson option:selected").text());
                });
                ////////////////////////END Enrollment Status Change For liaison///////////////////////////////////////

                $('#ddlIsStatus').on('change', function (e) {
                    var optionSelected = $("option:selected", this);
                    var valueSelected = this.value;
                    if (valueSelected == "Yes")
                        $("#EnrollmentstatusforLiaison").css("display", "Block");
                    else
                        $("#EnrollmentstatusforLiaison").css("display", "None");
                });

        }

        $("#Bulk-Migeration").click(function () {
            //$("#InProgressModal1").modal("show");
            $("#ddlEnrollmentStatus option").filter(function () {
                return $(this).text() == "Enrolled";
            }).detach();
            $(".loader").show();
            var Patients = [];
            $(".chkassignpatients").each(function () {
                if ($(this).prop('checked') == true) {
                    Patients.push($(this).val());
                }
            });
            if (Patients.length > 0) {
                $.ajax({
                    type: "POST",
                    url: "/Patient/ValidateBulkChanges",

                    data: { Patients: Patients },
                    success: function (result) {
                        if (result == "false") {
                            $(".loader").hide();
                            swal("Warning", "Please Select Patients with same Status!", "warning");
                            $(".loader").hide();
                            return false;
                        } else if (result == "NotSameCategoreis") {
                            swal("Warning", "Please Select Patients that have same Billing Categories!", "warning");
                            $(".loader").hide();
                            return false;
                        }
                        else if (result == "true") {
                            $("#ddlIsAppoinment option").filter(function () {
                                return $(this).val() == "Yes";
                            }).hide();
                            $("#Modal_changeStatus option").filter(function () {
                                return $(this).val() == "Yes";
                            }).show();

                        
                            resetModalData();
                            $("#InProgressModal1").modal("show");
                            $("#PostEnrollBillingCategoryDiv").hide();
                            AlreadyEnrolled = false;
                            postConsolerTranslaterList = null;
                            $(".loader").hide();
                            $("#UnableMigerateDiv").show();
              
                          
                   
                    
                   

                        }
                        else {
                            $(".PostBillingCategoriesDiv").hide();
                            resetModalData();
                            $("#InProgressModal1").modal("show");

                            $(".loader").hide();
                            var eList = JSON.parse(result);
                            postConsolerTranslaterList = eList;
                            for (var i = 0; i < eList.length; i++) {
                                $("#PostBillingCategoriesDiv" + eList[i]).show();
                                $("#MigerateAppointmentAppointment" + eList[i]).show();
                                $("#DeEnrollmentReason" + eList[i]).show();
                            }
                            $("#PostEnrollBillingCategoryDiv").show();
                            AlreadyEnrolled = true;
                          
                            $("#UnableMigerateDiv").hide();
                            $("#ddlIsAppoinment option").filter(function () {
                                return $(this).val() == "Yes";
                            }).show();
                            $("#Modal_changeStatus option").filter(function () {
                                return $(this).val() == "Yes";
                            }).hide();
                        }
                    }
                });
            } else {
                swal("Warning", "Please Select Patients for Bulk operation!", "warning");
                $(".loader").hide();
                return false;
            }
        });
    });

    var resetModalData = function () {
        sendEvent('#demo-modal-3', 1);
        $("#Modal_changeStatus").val("No");
        $("#ddlEnrollmentStatus").val("1");
        $("#ddlEnrollmentSubStatus").val("1");
            $("#LiaisonId option").filter(function () {
                return $(this).text() == "Do Nothing";
            }).prop("selected",true);
        $("#ddlTranslatorstatus option").filter(function () {
                return $(this).text() == "Do Nothing";
            }).prop("selected",true);
        //$("#ddlTranslatorstatus").val("");
        $("#ddlIsAppoinment").val("No");
        $("#PatientStatus").hide();
        $("#MigerateAppointmentDiv").hide();
        $("#EnrollemntStatusReson").hide();

    }

    var AlreadyEnrolled = false;
    var ByPassPreCounsloler = false;
    var postConsolerTranslaterList = [];





    const ShowHideDeEnrollmentDiv = id => {
        debugger;
            if ($("#billingCategoryCheckBox" + id).prop("checked") != true) {
                $("#DeEnrollmentStatusDiv" + id).show();
                $("#LiasonTranslatorDiv" + id).hide();

                if ($("#billingCategoryCheckBox" + id).data('identifier') == "CCM") {
                    $('[data-identifier="G0506 INITIAL VISIT"]').prop("checked", false);
                    $("[data-identifierId='G0506 INITIAL VISIT']").hide();

                }
                if ($("#billingCategoryCheckBox" + id).data('identifier') == "G0506 INITIAL VISIT") {
                    $('[data-identifier="CCM"]').prop("checked", false);
                    $("[data-identifierId='CCM']").hide();
                }
            }
            else {
                $("#DeEnrollmentStatusDiv" + id).hide();
                $("#LiasonTranslatorDiv" + id).show();

                if ($("#billingCategoryCheckBox" + id).data('identifier') == "CCM") {
                    $('[data-identifier="G0506 INITIAL VISIT"]').prop("checked", true);
                    $("[data-identifierId='G0506 INITIAL VISIT']").show();

                }
                if ($("#billingCategoryCheckBox" + id).data('identifier') == "G0506 INITIAL VISIT") {
                    $('[data-identifier="CCM"]').prop("checked", true);
                    $("[data-identifierId='CCM']").show();
                }
            }
    }







</script>
<script>
        function Details(Id) {
            var url = '@Url.Content("~/")' + "Patient/Details";

            $.post(url, { Id: Id }, function (result) {
            });
        }
</script>



@*
    <script src="https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js" type="text/javascript"></script>
    <script src="https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min.js" type="text/javascript"></script>
    <script src="https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min.js" type="text/javascript"></script>
    <script src="https://cdn.datatables.net/colreorder/1.5.1/js/dataTables.colReorder.min.js" type="text/javascript"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.5/js/dataTables.fixedHeader.min.js"></script>*@






<script>
        function InProgress(PatientId) {
            var url = '@Url.Content("~/")' + "EnrollmentStatus/PatientNo";

            $.post(url, { patientId: PatientId }, function (result) {
            });
        }

</script>









<script>
    var Result = function (data) {
        window.swal(data.result);
    }

</script>






